<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tool on 良宏</title>
    <link>/categories/tool/</link>
    <description>Recent content in Tool on 良宏</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Mar 2022 07:54:47 +0800</lastBuildDate><atom:link href="/categories/tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自建一个当前系统的基础镜像</title>
      <link>/p/%E8%87%AA%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BD%93%E5%89%8D%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F/</link>
      <pubDate>Thu, 03 Mar 2022 07:54:47 +0800</pubDate>
      
      <guid>/p/%E8%87%AA%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BD%93%E5%89%8D%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F/</guid>
      <description>大部分时候(使用的是 x86 架构)，已经有很多官方的 基础docker镜像 供我们使用了。 某些时候(非 x86 架构，或者使用的特殊linux发行版)，我们会</description>
    </item>
    
    <item>
      <title>Update Fork</title>
      <link>/p/update-fork/</link>
      <pubDate>Sat, 26 Feb 2022 15:54:47 +0800</pubDate>
      
      <guid>/p/update-fork/</guid>
      <description>原因 希望可以自动合并所有 Fork 项目的上游提交 实现 // ==UserScript== // @name Github AutoMergeFork // @namespace http://tampermonkey.net/ // @version 0.1 // @description try to take over the world! // @author clh021@gmail.com // @match https://github.com/clh021? // @icon https://www.google.com/s2/favicons?sz=64&amp;amp;domain=github.com // @grant none // ==/UserScript== (function () { &amp;#34;use strict&amp;#34;; const targetName = &amp;#34;auto_merge_fork_win_&amp;#34;; function openAllForkProj() { let forkProjs</description>
    </item>
    
    <item>
      <title>apt</title>
      <link>/p/apt/</link>
      <pubDate>Fri, 18 Feb 2022 09:01:47 +0800</pubDate>
      
      <guid>/p/apt/</guid>
      <description>apt-file apt-file 是一个软件包，它索引可用存储库中软件包的内容，并允许您在所有可用软件包中搜索特定文件。 例如，假设您下载一个软件尝试运行它时，收到一条消息</description>
    </item>
    
    <item>
      <title>Portainer</title>
      <link>/p/portainer/</link>
      <pubDate>Wed, 09 Feb 2022 13:55:05 +0800</pubDate>
      
      <guid>/p/portainer/</guid>
      <description>介绍 Portainer 是一个非常方便实用的 基于 Web 的 容器管理工具。 使用 # 删除可能已运行的容器 # docker rm -f portainer || true # 启动 portainer 容器管理服务 docker run -d --restart always --name portainer -p 47200:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer-ce # 数据持</description>
    </item>
    
    <item>
      <title>Vscode</title>
      <link>/p/vscode/</link>
      <pubDate>Fri, 24 Dec 2021 15:57:25 +0800</pubDate>
      
      <guid>/p/vscode/</guid>
      <description>https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf https://blog.poychang.net/vscode-shortcuts/ https://segmentfault.com/a/1190000007688656 https://github.com/skywind3000/awesome-cheatsheets/blob/cd8d0cebfe32c9263db8291a270bd33a162dc924/editors/keyboard-shortcuts-windows.pdf https://github.com/crper/Visual-Studio-Code-CNKEYMAP 前言 VSCode的快捷键继承了一些IDE风格，有VS的身影，也有Emacs的身影。 快捷键组合方式 Ctrl + Shift + ? : 常规按键组合 Ctrl + V Ctrl +V</description>
    </item>
    
    <item>
      <title>Tmux</title>
      <link>/p/tmux/</link>
      <pubDate>Fri, 24 Dec 2021 15:57:05 +0800</pubDate>
      
      <guid>/p/tmux/</guid>
      <description>tmux的快捷键以ctrl+B起始，也就是以下所有快捷键之前先用ctrl+B进入tmux快捷键模式 快捷键 s 列出会话，可进行切换 $ 重命名会话 d</description>
    </item>
    
    <item>
      <title>Netstat</title>
      <link>/p/netstat/</link>
      <pubDate>Fri, 24 Dec 2021 15:56:49 +0800</pubDate>
      
      <guid>/p/netstat/</guid>
      <description>netstat 作为调试网络问题的必备工具, 有些常用选项, 在这里记录一下 显示路由表: netstat -r 显示所有连接: netstat -a 显示所有 TCP 连接: netstat -at 显示所有 UDP 连接: netstat -au 显示所有</description>
    </item>
    
    <item>
      <title>Terminal</title>
      <link>/p/terminal/</link>
      <pubDate>Fri, 24 Dec 2021 15:56:34 +0800</pubDate>
      
      <guid>/p/terminal/</guid>
      <description>Linux终端Terminal常用快捷键 CTRL+ALT+T 打开终端 Ctrl+a 光标移动到开始位置 Ctrl+e 光标移动到最末尾 Ctrl+k 删除此处至末尾的所有内容 Ctrl+u 删除此处至开始的所有内容</description>
    </item>
    
    <item>
      <title>Grep</title>
      <link>/p/grep/</link>
      <pubDate>Fri, 24 Dec 2021 15:56:15 +0800</pubDate>
      
      <guid>/p/grep/</guid>
      <description>#- Search for a pattern within a file: grep &amp;#34;search_pattern&amp;#34; path/to/file #- Search for an exact string (disables regular expressions): grep --fixed-strings &amp;#34;exact_string&amp;#34; path/to/file #- Search for a pattern in all files recursively in a directory, showing line numbers of matches, ignoring binary files: grep --recursive --line-number --binary-files=without-match &amp;#34;search_pattern&amp;#34; path/to/directory #- Use extended regular expressions (supports `?`, `+`, `{}`, `()` and `|`), in case-insensitive mode: grep --extended-regexp --ignore-case &amp;#34;search_pattern&amp;#34; path/to/file #- Print 3 lines of context around, before, or after each match: grep --context|before-context|after-context=3 &amp;#34;search_pattern&amp;#34; path/to/file #- Print file name and line number for each match: grep --with-filename --line-number &amp;#34;search_pattern&amp;#34; path/to/file #- Search for lines matching a pattern, printing only the matched text: grep --only-matching &amp;#34;search_pattern&amp;#34; path/to/file #- Search stdin for lines that do not match a pattern: cat path/to/file | grep --invert-match &amp;#34;search_pattern&amp;#34; </description>
    </item>
    
    <item>
      <title>Find</title>
      <link>/p/find/</link>
      <pubDate>Fri, 24 Dec 2021 15:56:03 +0800</pubDate>
      
      <guid>/p/find/</guid>
      <description>找到root用户的文件全部改成www-data用户的 #!/bin/bash # find . -user root -group root -exec chown 1000:1000 {} \; # find . -user root -group root -exec chown www-data:www-data {} \; # find . -user root -group root | xargs chown 1000:1000 find . -user root -group root | xargs</description>
    </item>
    
    <item>
      <title>Emacs</title>
      <link>/p/emacs/</link>
      <pubDate>Fri, 24 Dec 2021 15:55:51 +0800</pubDate>
      
      <guid>/p/emacs/</guid>
      <description>常用指令 Emacs 快捷鍵是可以修改的，所以不一定要全部記住，只需要熟悉基本功能和知道有其他方便的擴充功能即可 Emacs 基本 C → Ctrl M → Alt 或 esc S → Shift [Ret] → return(enter) 範例 C-c</description>
    </item>
    
    <item>
      <title>Binwalk</title>
      <link>/p/binwalk/</link>
      <pubDate>Fri, 24 Dec 2021 15:55:36 +0800</pubDate>
      
      <guid>/p/binwalk/</guid>
      <description>本周一 安恒萌新粉丝群：928102972分享的工具为 binwalk。 Binwalk是一款快速、易用，用于分析，逆向工程和提取固件映像的工具。</description>
    </item>
    
    <item>
      <title>Awk</title>
      <link>/p/awk/</link>
      <pubDate>Fri, 24 Dec 2021 15:54:47 +0800</pubDate>
      
      <guid>/p/awk/</guid>
      <description>awk输出指定列 awk &amp;lsquo;{print $0}&amp;rsquo; file #打印所有列 awk &amp;lsquo;{print $1}&amp;rsquo; file #打印第一列 awk &amp;lsquo;{print $1, $3}&amp;rsquo; file #打印第一和第三列 cat file | awk &amp;lsquo;{print $3, $1}&amp;rsquo; #打印第三列和第一列，注意先后顺序。 cat file |</description>
    </item>
    
    <item>
      <title>Space Vim</title>
      <link>/p/space-vim/</link>
      <pubDate>Fri, 24 Dec 2021 15:53:58 +0800</pubDate>
      
      <guid>/p/space-vim/</guid>
      <description>项目用途 小问题 1, normal 状态时确保为英文状态 1, 如何高效使用 git 快捷管理 1, 如何修改启动界面，显示待办事项 1, 使用模糊搜索打开文件 启用 leaderf 模块，使用 Ctrl + p 模</description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>/p/vim/</link>
      <pubDate>Fri, 24 Dec 2021 15:53:48 +0800</pubDate>
      
      <guid>/p/vim/</guid>
      <description>1. Vim的几种模式 正常模式：可以使用快捷键命令，或按:输入命令行。 插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。 可</description>
    </item>
    
    <item>
      <title>Wget</title>
      <link>/p/wget/</link>
      <pubDate>Wed, 24 May 2017 15:57:25 +0800</pubDate>
      
      <guid>/p/wget/</guid>
      <description>wget -r -p -k -nc -o laravel-china.org.down.log http://laravel-china.org/docs wget -r -p -k -nc -o administrator.frozennode.com.down.log http://administrator.frozennode.com/docs wget -r -p -k -nc -o laravel.com.down.log http://laravel.com/api/4.2 wget -r -p -k -nc -o www.shouce.ren.log www.shouce.ren wget -r -p -k -nc -o laozi.log http://www.8bei8.com/book/laozi.html </description>
    </item>
    
    <item>
      <title>ab</title>
      <link>/p/ab/</link>
      <pubDate>Thu, 24 Dec 2015 15:54:47 +0800</pubDate>
      
      <guid>/p/ab/</guid>
      <description>Install apt-get install apache2-utils Use ./ab -c 100 -n 10000 http://127.0.0.1/index.php #-c 100 即：每次并发100个 #-n 10000 即： 共发送10000个请求 #用ab测试时，最大并发不能超过1024，其实ab本身没有做这个</description>
    </item>
    
    <item>
      <title>API DOC</title>
      <link>/p/api-doc/</link>
      <pubDate>Thu, 20 Feb 2014 10:10:05 +0000</pubDate>
      
      <guid>/p/api-doc/</guid>
      <description>api.doc $wait=array(&amp;#39;待更新&amp;#39;=&amp;gt; array(&amp;#39;待更新&amp;#39;,&amp;#39;待更新&amp;#39;,&amp;#39;</description>
    </item>
    
  </channel>
</rss>
