<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>三剑客 on 良宏</title>
        <link>/tags/%E4%B8%89%E5%89%91%E5%AE%A2/</link>
        <description>Recent content in 三剑客 on 良宏</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 24 Dec 2021 15:56:15 +0800</lastBuildDate><atom:link href="/tags/%E4%B8%89%E5%89%91%E5%AE%A2/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Grep</title>
        <link>/post/tech/grep/</link>
        <pubDate>Fri, 24 Dec 2021 15:56:15 +0800</pubDate>
        
        <guid>/post/tech/grep/</guid>
        <description>&lt;h1 id=&#34;grep&#34;&gt;grep
&lt;/h1&gt;&lt;h2 id=&#34;参数&#34;&gt;参数
&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; -A&amp;lt;显示行数&amp;gt;: 除了显示符合范本样式的那一列之外，并显示该行之后的内容。
 -B&amp;lt;显示行数&amp;gt;: 除了显示符合样式的那一行之外，并显示该行之前的内容。
 -C&amp;lt;显示行数&amp;gt;: 除了显示符合样式的那一行之外，并显示该行之前后的内容。
 -c: 统计匹配的行数
 -e: 实现多个选项间的逻辑or 关系
 -E: 扩展的正则表达式
 -f FILE: 从FILE获取PATTERN匹配
 -F: 相当于fgrep
 -i --ignore-case #忽略字符大小写的差别。
 -n: 显示匹配的行号
 -n: 搜索结果显示行号
 -o: 仅显示匹配到的字符串
 -q: 静默模式，不输出任何信息
 -r: 递归查找
 -s: 不显示错误信息。
 -v: 显示不被pattern 匹配到的行，相当于[^] 反向匹配
 -w: 匹配 整个单词
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;常用法&#34;&gt;常用法
&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;查找不区分大小写
grep -rni memcpy .
在搜索结果中用反向匹配”-v“排除*.o.cmd文件的匹配
grep -rn memcpy | grep -v .o.cmd
使用多个-v依次对上一次的结果进行反向匹配
grep -rn memcpy | grep -v .o.cmd | grep -v .s.cmd | grep -v .o | grep -v .map
使用-Ev一次进行多个反向匹配搜索
grep -rn memcpy | grep -Ev &amp;#39;\.o\.cmd|\.s\.cmd|\.o|\.map&amp;#39;
使用”--exclude=GLOB“来指定排除某些格式的文件，如不在“*.cmd”，“*.o”和“*.map”中搜索
grep -rn --exclude=*.cmd --exclude=*.o --exclude=*.map memcpy
跟“--exclude=GLOB”类似的用法有“--include=GLOB”，从指定的文件中搜索，如只在“*.cmd”，“*.o”和“*.map”中搜索
grep -rn --include=*.cmd --include=*.o --include=*.map memcpy
“--include=GLOB”在不确定某些函数是否被编译时特别有用
grep -rn --include=*.o rpi_is_serial_active
不在某些指定的目录查找
grep -rn --exclude-dir=out memcpy
忽略多个目录
grep -rn --exclude-dir=out --exclude-dir=doc memcpy
查找精确匹配结果
grep -rnw memcpy .
查找作为单词分界的结果
grep -rn -E &amp;#34;(\b|_)memcpy(\b|_)&amp;#34;
查看查找结果的上下文想看宏定义“MEMCPY”匹配的前三行和后两行
grep -rn -B 3 -A 2 MEMCPY

find命令先找出makefile类文件，然后再从结果中搜索CFLAGS
find . -iname Makefile -o -iname *.inc -o -iname *.mk | xargs grep -rn CFLAGS
grep -rn --include=Makefile --include=*.inc --include=*.mk CFLAGS .

在linux目录中查找所有的*.h，并在这些文件中查找“SYSCALL_VECTOR”
find linux -name *.h | xargs grep &amp;#34;SYSCALL_VECTOR&amp;#34;
打印出所有包含”SYSCALL_VECTOR”字符串的文件名
find linux -name *.h | xargs grep -l &amp;#34;SYSCALL_VECTOR&amp;#34;
grep的选项-l只打印匹配的文件名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实战脚本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#echo &amp;lt;&amp;lt;&amp;lt;EOT &amp;gt; test.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#aaaa&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#bbbbbb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#AAAaaa&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#BBBBBASDABBDA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#EOT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set +x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set -x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tee test.txt &amp;gt; /dev/null &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bbbbbb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;AAAaaa
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;BBBBBASDABBDA
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aaa&amp;#34;&lt;/span&gt; &amp;gt; grep.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat grep.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -A2 b test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -B1 b test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -C1 b test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -c aaa test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -e AAA -e bbb test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -in b test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -o ASDA test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -q aa test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -v aaa test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -w aaa test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -f grep.txt test.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;正则表达式&#34;&gt;正则表达式
&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; . 匹配任意单个字符，不能匹配空行
  [] 匹配指定范围内的任意单个字符
  [^] 取反
  [:alnum:] 或 [0-9a-zA-Z]
  [:alpha:] 或 [a-zA-Z]
  [:upper:] 或 [A-Z]
  [:lower:] 或 [a-z]
  [:blank:] 空白字符（空格和制表符）
  [:space:] 水平和垂直的空白字符（比[:blank:]包含的范围广）
  [:cntrl:] 不可打印的控制字符（退格、删除、警铃...）
  [:digit:] 十进制数字 或[0-9]
  [:xdigit:]十六进制数字
  [:graph:] 可打印的非空白字符
  [:print:] 可打印字符
  [:punct:] 标点符号
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实战&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;------------------------sleepAndExecDebug&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set +x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set -x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aaa&amp;#34;&lt;/span&gt; &amp;gt; grep.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tee test.reg.txt &amp;gt; /dev/null &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;123
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;//[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tee test.reg2.txt &amp;gt; /dev/null &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ggle
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;gogle
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;google
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;goooooooooooooooooooooooooogle
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;gagle
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep . test.reg.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;a/&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; test.reg.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;^abc&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; test.reg.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;:alnum:&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; test.reg.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;a-z&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; test.reg.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;:space:&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; test.reg.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;:punct:&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; test.reg.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g[o]*gle&amp;#34;&lt;/span&gt; test.reg2.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g[o].*gle&amp;#34;&lt;/span&gt; test.reg2.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g[o]\?gle&amp;#34;&lt;/span&gt; test.reg2.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g[o]\+gle&amp;#34;&lt;/span&gt; test.reg2.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g[o]\{1,2\}gle&amp;#34;&lt;/span&gt; test.reg2.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -E &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g[o]{10,}gle&amp;#34;&lt;/span&gt; test.reg2.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;egrep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g[o]{,10}gle&amp;#34;&lt;/span&gt; test.reg2.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;位置锚定&#34;&gt;位置锚定
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ^  行首锚定，用于模式的最左侧
  $  行尾锚定，用于模式的最右侧
  ^PATTERN$，用于模式匹配整行
  ^$ 空行
  ^[[:space:]].*$  空白行
  \&amp;lt; 或 \b  词首锚定，用于单词模式的左侧
  \&amp;gt; 或 \b  词尾锚定；用于单词模式的右侧
  \&amp;lt;PATTERN\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实战&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;------------------------sleepAndExecDebug&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set +x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set -x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tee test.reg3.txt &amp;gt; /dev/null &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bbbbbb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;acdfsddsfb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep ^a test.reg3.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep b$ test.reg3.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep ^$ test.reg3.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep ^&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;:space:&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;.*$ test.reg3.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;a.*b\&amp;gt;&amp;#34;&lt;/span&gt; test.reg3.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;分组和后向引用&#34;&gt;分组和后向引用
&lt;/h3&gt;&lt;p&gt;① 分组：() 将一个或多个字符捆绑在一起，当作一个整体进行处理
　　分组括号中的模式匹配到的内容会被正则表达式引擎记录于内部的变量中，这些变量的命名方式为: \1, \2, \3, &amp;hellip;
② 后向引用
引用前面的分组括号中的模式所匹配字符，而非模式本身
\1 表示从左侧起第1个左括号以及与之匹配右括号之间的模式所匹配到的字符
\2 表示从左侧起第2个左括号以及与之匹配右括号之间的模式所匹配到的字符，以此类推
&amp;amp; 表示前面的分组中所有字符&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/tech/grep/1.png&#34;
	width=&#34;487&#34;
	height=&#34;135&#34;
	srcset=&#34;/post/tech/grep/1_hu_6f7c7e74a1a1cc64.png 480w, /post/tech/grep/1_hu_12b16602ff2bb148.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;360&#34;
		data-flex-basis=&#34;865px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;------------------------sleepAndExecDebug&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set +x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set -x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tee test.reg4.txt &amp;gt; /dev/null &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello world Hello world
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Heiii world Heiii world
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello world Heiii wwwww
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\(He\)&amp;#34;&lt;/span&gt; test.reg4.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\(He\).*\1&amp;#34;&lt;/span&gt; test.reg4.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------sleepAndExecDebug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\(He\).*\(wo\).*\2&amp;#34;&lt;/span&gt; test.reg4.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;扩展正则表达式&#34;&gt;扩展正则表达式
&lt;/h3&gt;&lt;p&gt;（1）字符匹配：
.  任意单个字符
[]  指定范围的字符
[^] 不在指定范围的字符
次数匹配：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;：匹配前面字符任意次
?  : 0 或1次&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;：1 次或多次
{m} ：匹配m次 次
{m,n} ：至少m ，至多n次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）位置锚定：
^ : 行首
$ : 行尾
&amp;lt;, \b : 语首
&amp;gt;, \b : 语尾
分组：()
后向引用：\1, \2, &amp;hellip;&lt;/p&gt;
&lt;p&gt;（3）总结
　　除了&amp;lt;, \b : 语首、&amp;gt;, \b : 语尾；使用其他正则都可以去掉\；&lt;/p&gt;
&lt;h1 id=&#34;ack&#34;&gt;ack
&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# http://betterthangrep.com/documentation/
# http://codeseekah.com/2012/03/11/ack-vs-grep/
sudo apt install ack
# 速度非常快,因为它只搜索有意义的东西。
# 更友好的搜索，忽略那些不是你源码的东西。
# 为源代码搜索而设计，用更少的击键完成任务。
# 非常轻便，移植性好。
# 免费且开源

-c(统计)/ -i(忽略大小)/ -h(不显示名称)/
-l(只显文件名)/ -n(加行号)/ -v(显示不匹配)

文本搜索
ack hello
ack -i hello  # -i, --ignore-case   屏蔽大小写
                   # -I, --no-ignore-case  不屏蔽大小写(默认)
ack -v hello  # -v, --invert-match  反向匹配
ack -w hello  # -w, --word-regexp   单词匹配
ack -Q &amp;#39;hello*&amp;#39;    # -Q, --literal  引用所有元字符； PATTERN 是文字

文件搜索
ack --line=1       # 输出所有文件第二行
ack -l &amp;#39;hello&amp;#39;     # 包含的文件名
ack -L &amp;#39;print&amp;#39;     # 非包含文件名


ack hello --pager=&amp;#39;less -R&amp;#39;    # 以less形式展示
ack hello --noheading      # 不在头上显示文件
ack hello --nocolor        # 不对匹配字符着色


ack -f hello.py    # 查找全匹配文件
ack -g hello.py$    # 查找正则匹配文件
ack -g hello  --sort-files     #查找然后排序


ack --python hello #查找所有python文件
ack -G hello.py$ hello     # 查找匹配正则的文件

ack配置
# 设置排序
--sort-files
#设置文件过滤
--python
--html
--js
--conf
# 设置显示
--noheading
# 定义新的文件类型
--type-set=conf=.conf
# 智能识别大小写
--smart-case
# 设置以less形式展示，设定less参数
--pager=less -R -M --shift 5 -i
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;ag&#34;&gt;ag
&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get install silversearcher-ag

ag main
ag &amp;#34;main(&amp;#34;
ag &amp;#34;main\(&amp;#34; src
ag &amp;#34;main\(&amp;#34; --ignore-dir 3rdparty
ag &amp;#34;main\(&amp;#34; --ignore-dir 3rdparty --ignore-dir doc
ag &amp;#34;http&amp;#34; -l | xargs sed -i &amp;#39;s/http/https/g&amp;#39;
grep -ri &amp;#34;http&amp;#34; * -l | xargs sed -i &amp;#39;s/http/https/g&amp;#39;

ag 另外其他很有用的選項是
ag -i 使用大小寫不敏感的匹配方式
ag -w 全詞匹配
ag -G &amp;#34;.+\.java&amp;#34; 搜索 java 類型的檔案
ag -l 顯示有匹配的檔案路徑
ag -L 顯示沒有任何匹配的檔案路徑
ag -v 反向匹配，將匹配到的資料排除

ag 搭配正規表達式
ag ^abc log.txt
ag abc$ log.txt
ag abc[0-9] log.txt
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Awk</title>
        <link>/post/tech/awk/awk/</link>
        <pubDate>Fri, 24 Dec 2021 15:54:47 +0800</pubDate>
        
        <guid>/post/tech/awk/awk/</guid>
        <description>&lt;p&gt;awk输出指定列
awk &amp;lsquo;{print $0}&amp;rsquo; file    #打印所有列
awk &amp;lsquo;{print $1}&amp;rsquo; file  #打印第一列
awk &amp;lsquo;{print $1, $3}&amp;rsquo; file   #打印第一和第三列
cat file | awk &amp;lsquo;{print $3, $1}&amp;rsquo;   #打印第三列和第一列，注意先后顺序。
cat file | awk &amp;lsquo;{print $3, $NF}&amp;rsquo; #打印第三列和最后一列
awk -F &amp;ldquo;:&amp;rdquo; &amp;lsquo;{print $1, $3}&amp;rsquo;  #以“:”为分隔符分割列，然后打印第一列和第三列
$0表示所有列&lt;/p&gt;
&lt;p&gt;-F：指定分隔符&lt;/p&gt;
&lt;p&gt;$(NF)表示最后一列，$(NF-1)表示倒数第二列，以此类推。&lt;/p&gt;
&lt;p&gt;特殊案例：如果我想打印N列之后的所有列，该怎么办?&lt;/p&gt;
&lt;p&gt;解决方法是，把前N列都赋值为空，然后打印所有列。&lt;/p&gt;
&lt;p&gt;awk &amp;lsquo;{for(i=1;i&amp;lt;=N;i++){$i=&amp;quot;&amp;quot;}; print $0}&amp;rsquo; file&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/u/242f108d3236&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://cdn2.jianshu.io/assets/default_avatar/13-394c31a9cb492fcb39c27422ca7d2815.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;0.6372016.03.07 14:24:15字数 3,558阅读 28,100&lt;/p&gt;
&lt;p&gt;&amp;lsquo;#Gun awk的相关用法&lt;/p&gt;
&lt;h4 id=&#34;awk的工作原理&#34;&gt;awk的工作原理
&lt;/h4&gt;&lt;p&gt;一次读取一行文本，按输入分隔符进行切片，切成多个组成部分，将每片直接保存在内建的变量中，$1,$2,$3&amp;hellip;.，引用指定的变量，可以显示指定断，或者多个断。如果需要显示全部的，需要使用$0来引用。可以对单个片断进行判断，也可以对所有断进行循环判断。其默认分隔符为空格&lt;/p&gt;
&lt;h4 id=&#34;awk的基本用法格式&#34;&gt;awk的基本用法格式
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h6 id=&#34;awk-options-program-file&#34;&gt;awk [options] &amp;lsquo;program&amp;rsquo; FILE&amp;hellip;&amp;hellip;
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;语句之间用分号分隔&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&#34;options&#34;&gt;[options]
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-F&lt;/code&gt; : 指明输入时用到的字段分隔符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v var=VALUE&lt;/code&gt; : 自定义变量
&lt;ul&gt;
&lt;li&gt;在awk中变量的引用不需要加&lt;code&gt;$&lt;/code&gt;，而是直接引用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;awk用法的简要介绍&#34;&gt;awk用法的简要介绍
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h6 id=&#34;第一种模式&#34;&gt;第一种模式
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;awk [options] &amp;lsquo;scripts&amp;rsquo; file1,file2&amp;hellip;..&lt;/p&gt;
&lt;p&gt;在这种模式中，scripts主要是命令的堆砌，对输入的文本行进行处理，通过命令print,printf或是输出重定向的方式显示出来，这里经常用到的知识点是：awk的内置变量，以及命令print和printf的使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&#34;第二种模式&#34;&gt;第二种模式
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;awk [options] &amp;lsquo;PATTERN{action}&amp;rsquo; file,file2&amp;hellip;..&lt;/p&gt;
&lt;p&gt;在这种模式中，最重要的是5种模式和5种action的使用，以及awk的数组的使用和内置函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第一种模式-1&#34;&gt;第一种模式
&lt;/h3&gt;&lt;h6 id=&#34;1print&#34;&gt;1、print
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;1、各项目之间使用逗号隔开，而输出时则以空白字符分隔&lt;/li&gt;
&lt;li&gt;2、输出的Item可以为字符串或数值，当前记录的字段（如$1）、变量或awk的表达式，数值会先转换为字符串，而后再输出&lt;/li&gt;
&lt;li&gt;3、print命令后面的Item可以省略，此时其功能相当于print $0,因此，如果想输出空白行，则需要使用print&amp;quot;&amp;quot;&lt;/li&gt;
&lt;li&gt;4、如果引用变量$1或其他的，是不能使用引号引起来&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2内置变量&#34;&gt;2、内置变量
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FS&lt;/code&gt; : input field seperator,输入的分隔符，默认为空白字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OFS&lt;/code&gt;: output field seperator,输出的分隔符，默认为空白字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RS&lt;/code&gt; : input record seperator,输入的换行符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ORS&lt;/code&gt;: output record seperator,输出时的换行符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NF&lt;/code&gt; : number of field ,字段个数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk &amp;lsquo;{print NF}&amp;rsquo; /etc/fstab :打印每行的最后一个字段为第几个字段，这里是数量引用，不是对应的值引用&lt;/li&gt;
&lt;li&gt;awk &amp;lsquo;{print $NF}&amp;rsquo; /etc/fstab : 打印每行中的最后一个字段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NR&lt;/code&gt; : number of record,文件中的行数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk &amp;lsquo;{print NR}&amp;rsquo; /etc/fstab: 打印行号，其会个行号都显示&lt;/li&gt;
&lt;li&gt;awk &amp;lsquo;END{print NR}&amp;rsquo; /etc/fstab: 显示文本的总行数，其只是在文本处理完成后，只显示一次行号&lt;/li&gt;
&lt;li&gt;awk &amp;lsquo;{print NR}&amp;rsquo; file1 file2 : 会每把所有文档进行总的编号，而不是单独对文件进行编号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FNR&lt;/code&gt; : 对每个文件进行行数单独编号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk &amp;lsquo;{print FNR}&amp;rsquo; file1 file2 : 会对每个文件的行数进行单独的编号显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FILENAME&lt;/code&gt; : awk命令所处理的文件的名称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk &amp;lsquo;{print FILENAME}&amp;rsquo; file1 : 显示当前文件名，但会每行显示一次&lt;/li&gt;
&lt;li&gt;awk &amp;lsquo;END{print FILENAME}&amp;rsquo; file1 : 显示当前文件名，但只会显示一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ARGC&lt;/code&gt; : 命令行中参数的个数，其awk命令也算一个参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk &amp;lsquo;END{print ARGC}&amp;rsquo; /etc/fstab : 显示共有几个参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ARGV&lt;/code&gt; : 其是一个数组，保存的是命令行所给定的各参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk &amp;lsquo;END{print ARGV[0]}&amp;rsquo; /etc/fstab : 显示第一个参数，默认第一个参数个awk命令本身&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;3自定义变量&#34;&gt;3、自定义变量
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-v var=VALUE&lt;/code&gt; : 在选项位置定义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;awk &#39;BEGIN{test=&amp;quot;hello&amp;quot;;print test}&#39;&lt;/code&gt; : 在program中定义&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;4printf命令&#34;&gt;4、printf命令
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;其格式化输出：printf FORMAT,item1,item2&amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;要点&#34;&gt;要点：
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;1、其与print命令最大不同是，printf需要指定format&lt;/li&gt;
&lt;li&gt;2、printf后面的字串定义内容需要使用双引号引起来&lt;/li&gt;
&lt;li&gt;3、字串定义后的内容需要使用&amp;quot;,&amp;ldquo;分隔，后面直接跟Item1,item2&amp;hellip;.&lt;/li&gt;
&lt;li&gt;4、format用于指定后面的每个item的输出格式&lt;/li&gt;
&lt;li&gt;5、printf语句不会自动打印换行符，\n&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;格式符&#34;&gt;格式符
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%c&lt;/code&gt;: 显示字符的ASCII码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%d&lt;/code&gt;,&lt;code&gt;%i&lt;/code&gt; : 显示十进制整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%e&lt;/code&gt;,&lt;code&gt;%E&lt;/code&gt;: 科学计数法数值显示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%f&lt;/code&gt; : 显示为浮点数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%g&lt;/code&gt;,&lt;code&gt;%G&lt;/code&gt;: 以科学数法或浮点形式显示数值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%s&lt;/code&gt;: 显示字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%u&lt;/code&gt;: 无符号整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%%&lt;/code&gt;: 显示%号自身，相当于转义&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;修饰符&#34;&gt;修饰符
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt; : 显示宽度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-&lt;/code&gt; : 左对齐（默认为右对齐）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt; : 显示数值符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk -F: &amp;lsquo;{printf &amp;ldquo;%s\n&amp;rdquo;,$1}&amp;rsquo; /etc/fstab&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{printf &amp;ldquo;username: %s,UID:%d\n&amp;rdquo;,$1,$3}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{printf &amp;ldquo;username: %-20s shell: %s\n&amp;rdquo;,$1,$NF}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;输出重定向&#34;&gt;输出重定向
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;print items &amp;gt; &amp;ldquo;output-file&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;print items &amp;raquo; &amp;ldquo;output-file&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;print items | command&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  特殊文件描述符：
  /dev/stdin :标准输入
  /dev/stdout:标准输出
  /dev/stderr:错误输出
  /dev/fd/N : 某特定文件描述符，如/dev/stdin就相当于/dev/fd/0
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;示例&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{printf &amp;ldquo;%-15s %i\n&amp;rdquo;,$1,$3 &amp;gt; &amp;ldquo;/dev/stderr&amp;rdquo;}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第二种模式-1&#34;&gt;第二种模式
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;awk [option] &amp;lsquo;PATTERN{action}&amp;rsquo; file1,file2&amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;pattern的使用&#34;&gt;PATTERN的使用
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;REGEXP&lt;/code&gt;：正则表达式，格式为&lt;code&gt;/regular expression/&lt;/code&gt;,仅处理能够被此处模式匹配到的行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  awk &amp;#39;/^UUID/{print $1}&amp;#39; /etc/fstab
  awk &amp;#39;!/^UUID/{print $1}&amp;#39; /etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;relational expression&lt;/code&gt;:表达式，其值非0或为非空字符时满足条件,用运算符&lt;code&gt;~&lt;/code&gt;(匹配)和&lt;code&gt;!~&lt;/code&gt;（不匹配）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  $1 ~ /foo/ 或者 $1 == &amp;#34;magedu&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ranges&lt;/code&gt; : 指定匹配范围，格式为&lt;code&gt;/pat1/,/pat2/&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  awk -F: &amp;#39;{NR&amp;gt;=2&amp;amp;&amp;amp;&amp;lt;=10){print $1}&amp;#39; /etc/passwd
  awk -F: /^root/,/^myuser/{print $1}&amp;#39; /etc/passwd
  注意：不支持直接给出数字的格式
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BEGIN/END模式&lt;/code&gt; : 特殊模式，仅在awk命令执行前运行一次或结束前运行一次&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  awk -F: &amp;#39;BEGIN{print &amp;#34;Username    ID    Shell&amp;#34;}{printf &amp;#34;%-10s%-10s%-20s\n&amp;#34;,$1,$3,$7}&amp;#39; /etc/passwd ：先打印一个表头
  awk -F: &amp;#39;BEGIN{print &amp;#34;username   ID     Shell&amp;#34;}{printf &amp;#34;%-10s%-10s%-20s\n&amp;#34;,$1,$3,$7}END{print &amp;#34;end of report.&amp;#34;} /etc/passwd ：打印一个表尾
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Empty(空模式)：匹配任意输入行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  /正则表达式/：使用通配符的扩展集。
  关系表达式：可以用下面运算符表中的关系运算符进行操作，可以是字符串或数字的比较，如$2&amp;gt;$1选择第二个字段比第一个字段长的行。
  模式匹配表达式：
  模式，模式：指定一个行的范围。该语法不能包括BEGIN和END模式。
  BEGIN：让用户指定在第一条输入记录被处理之前所发生的动作，通常可在这里设置全局变量。
  END：让用户在最后一条输入记录被读取之后发生的动作。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;常见的action&#34;&gt;常见的Action
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;1）Expressions&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Control statements :if while等&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Compound statements:组合语句&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Input statements&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Output statements&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;控制语句&#34;&gt;控制语句
&lt;/h5&gt;&lt;h6 id=&#34;1if-else&#34;&gt;1、if-else
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;语法：if (condition){then-body} else{[else-body]}&lt;/li&gt;
&lt;li&gt;示例：
&lt;ul&gt;
&lt;li&gt;awk -F: &amp;lsquo;{if($3&amp;gt;=1000)print $1,$3}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{if($3&amp;gt;=1000){printf &amp;ldquo;Common user: %s\n&amp;rdquo;,$1} else {printf &amp;ldquo;root or sysuser: %s\n&amp;rdquo;,$1}}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{if($NF==&amp;quot;/bin/bash&amp;rdquo;)print $1}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{if(NF&amp;gt;5) print $0}&amp;rsquo; /etc/fstab&lt;/li&gt;
&lt;li&gt;df -h | awk -F[%] &amp;lsquo;/^/dev/{print $1}&amp;rsquo; | awk {if($NF&amp;gt;=20) print $1}&amp;rsquo;&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{if($1==&amp;ldquo;root&amp;rdquo;) print $1,&amp;ldquo;Admin&amp;rdquo;;else print $1, &amp;ldquo;Common User&amp;rdquo;}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{if($1==&amp;ldquo;root&amp;rdquo;) printf &amp;ldquo;%-15s: %s\n&amp;rdquo;,$1,&amp;ldquo;Admin&amp;rdquo;;else printf &amp;ldquo;%-15s: %s\n&amp;rdquo;,$1, &amp;ldquo;Common user&amp;rdquo;}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;li&gt;awk -F: -v sum=0 &amp;lsquo;{if($3&amp;gt;=500) sum++}END{print sum}&amp;rsquo; /etc/passwd : 统计用户ID大于500的有多少行&lt;/li&gt;
&lt;li&gt;awk -F: -v OFS=&amp;quot;\t&amp;quot; &amp;lsquo;{if($3&amp;lt;=999)printf &amp;ldquo;Sys user:\t%-15s ID is :%d\n&amp;rdquo;, $1,$3;else{printf &amp;ldquo;Common user:\t%-15s ID is :%d\n&amp;rdquo;,$1,$3}}&amp;rsquo; /etc/passwd :可以使用\t制表符控制 输出格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;2while用于循环字段的&#34;&gt;2、while：用于循环字段的
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;语法：while (condition){statement1;statment2;&amp;hellip;.}&lt;/li&gt;
&lt;li&gt;示例：
&lt;ul&gt;
&lt;li&gt;awk &amp;lsquo;/^[[:space:]]*linux16/{print}&amp;rsquo; /boot/grub2/grub.cfg&lt;/li&gt;
&lt;li&gt;awk &amp;lsquo;/^[[:space:]]*linux16/{i=1;while(i&amp;lt;=NF){print $i,length($i);i++}}&amp;rsquo; /etc/grub2.cfg :对每个字段进行字符个数统计&lt;/li&gt;
&lt;li&gt;awk &amp;lsquo;/^[[:space:]]]*linux16/{i=1;while(i&amp;lt;=NF){if(length($i)&amp;lt;=7)print $i,length($i);i++}}&amp;rsquo; /etc/grub2.cfg&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{i=1;while(i&amp;lt;=3){print $i;i++}}&amp;rsquo; /etc/passwd:打印用户名、密码占位符、ID&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{i=1;while(i&amp;lt;=NF){if(length($i)&amp;gt;=4){print $i};i++}}&amp;rsquo; /etc/passwd : 字段大小于等于4的都显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;3do-while&#34;&gt;3、do-while
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;语法：do {statement1,statement2,&amp;hellip;.} while (dondition)&lt;/li&gt;
&lt;li&gt;示例：
&lt;ul&gt;
&lt;li&gt;awk -F: &amp;lsquo;{i=1;do{print $i;i++}while(i&amp;lt;=3)}&amp;rsquo; /etc/passwd :打印用户名、密码占位符、UID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;4for&#34;&gt;4、for
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语法：for(variable assignment;condition;iteration process){ statement1,statement2,&amp;hellip;}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk &amp;lsquo;/^[[:space:]]*linux16/{for(i=1;i&amp;lt;=NF;i++) {print $i,length($i)}}&amp;rsquo; /etc/grub2.cfg&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{for(i=1;i&amp;lt;=3;i++)print $i}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;li&gt;awk -F: &amp;lsquo;{for(i=1;i&amp;lt;=NF;i++) { if (length($i)&amp;gt;=4) {print $i}}}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;5for循环还可以用来遍历数组元素&#34;&gt;5、for循环还可以用来遍历数组元素
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;语法：for (i in array) {statement1,statement2,&amp;hellip;.}&lt;/li&gt;
&lt;li&gt;示例
&lt;ul&gt;
&lt;li&gt;awk -F: &amp;lsquo;$NF!~/^$/{BASH[$NF]++}END{for(A in BASH){printf &amp;ldquo;%15s:%i\n&amp;rdquo;,A,BASH[A]}}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;li&gt;awk ‘{for(i=1;i&amp;lt;=NF;i++){count[$i]++}}END{for(i in count) {print i,count[i]}}’ /etc/fstab&lt;/li&gt;
&lt;li&gt;awk &amp;lsquo;/^UUID/{filesystem[$3]++}END{for (i in filesystem) {print i,filesystem[i]}}&amp;rsquo; /etc/fstab ：统计/etc/fstab中各文件系统的次数&lt;/li&gt;
&lt;li&gt;netstat -tan | awk &amp;lsquo;/^tcp&amp;gt;/{state[$NF]++}END{for(i in state) {print i,state[i]}}&amp;rsquo; ： 统计各连接状态的次数&lt;/li&gt;
&lt;li&gt;awk &amp;lsquo;{ip[$1]++} END {for (i in ip) {print i,ip[i]}}&amp;rsquo; /var/log/httpd/access_log : 统计访问日志中各IP的访问次数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;6case&#34;&gt;6、case
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;语法：switch (expression) { case VALUE or /REGEXP/: statement1, statement2,&amp;hellip; default: statement1, &amp;hellip;}&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;7break和continue&#34;&gt;7、break和continue
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;break [n]&lt;/li&gt;
&lt;li&gt;continue : 进入下一个字段&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;8next&#34;&gt;8、next
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;功能：提前结束本行文本的处理，并接着处理下一行&lt;/li&gt;
&lt;li&gt;示例：
&lt;ul&gt;
&lt;li&gt;awk -F: &amp;lsquo;{if($3%2==0) next;print $1,$3}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;li&gt;awk -F: ‘{if ($3%2!=0) next;print $1,$3}’ /etc/passwd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;awk的操作符&#34;&gt;awk的操作符
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h6 id=&#34;1算术操作符&#34;&gt;1、算术操作符
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-x&lt;/code&gt; : 负值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+x&lt;/code&gt; : 转换为数值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x^y&lt;/code&gt; :&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x**y&lt;/code&gt; : 次方&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x*y&lt;/code&gt; : 乘法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x/y&lt;/code&gt; : 除法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x+y&lt;/code&gt; :&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x-y&lt;/code&gt; :&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x%y&lt;/code&gt; :&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&#34;2字符串操作符&#34;&gt;2、字符串操作符
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;只有一个，而且不用写出来，用于实现字符串连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&#34;3赋值操作符&#34;&gt;3、赋值操作符
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;++&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，如果某模式为&lt;code&gt;=&lt;/code&gt;号，此时使用/=/可能会有语法错误，就以/[=]/替代&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&#34;4布尔值&#34;&gt;4、布尔值
&lt;/h6&gt;&lt;p&gt;awk中，任何非0值或非空字符串都为真，反之为假&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&#34;5比较操作符&#34;&gt;5、比较操作符
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&amp;lt;y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&amp;lt;=y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&amp;gt;y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&amp;gt;=y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x==y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x!=y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x~y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x!~y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&#34;6逻辑操作符&#34;&gt;6、逻辑操作符
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&#34;7函数调用&#34;&gt;7、函数调用
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;`func_name(argu1,argu2,&amp;hellip;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&#34;8条件表达式&#34;&gt;8、条件表达式
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;selector?if-true-expression:if-false-expression
&lt;ul&gt;
&lt;li&gt;awk -F: ‘{$3&amp;gt;=1000?usertype=“Common user”:usertype=“Sysadmin or sysUser”;printf “%15s:%-s\n&amp;quot;,$1,usertype}’ /etc/passwd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;awk的数组&#34;&gt;awk的数组
&lt;/h5&gt;&lt;h6 id=&#34;1定义数组的注意事项&#34;&gt;1、定义数组的注意事项
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;1、可使用任意字符串，字符串要使用双引号&lt;/li&gt;
&lt;li&gt;2、如果某数组元素事先不存在，在引用时awk会自动创建此元素，并将其初始化为空串&lt;/li&gt;
&lt;li&gt;3、要遍历数组中的每个元素，要使用for循环
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for(var in array){statement1,&amp;hellip;..}&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  注意：var用于引用数组时，是引用的下标，而不是元素值
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;定义数组的格式&#34;&gt;定义数组的格式
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;awk &amp;lsquo;BEGIN{weekdays[&amp;ldquo;mon&amp;rdquo;]=&amp;ldquo;Monday&amp;rdquo;;weekdays[&amp;ldquo;tue&amp;rdquo;]=&amp;ldquo;Tuesday&amp;rdquo;;print week[&amp;ldquo;mon&amp;rdquo;]}&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;示例&#34;&gt;示例：
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;统计netstat -tan中各状态的次数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;netstat -tan | awk &amp;lsquo;/^tcp&amp;gt;/{state[$NF]++}END{for(i in state) {print i,state[i]}}’
&lt;ul&gt;
&lt;li&gt;每出现一被/^tcp/模式匹配到的行，数组S[$NF]就加1，NF为当前匹配到的行的最后一个字段，此处用其值做为数组S的元素索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统计www服务的访问日志中IP数量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk ‘{ip[$1]++} END {for (i in ip) {print i,ip[i]}}’ /var/log/httpd/access_log&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统计/etc/fstab文件中每个文件系统类型出现的次数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk &amp;lsquo;/^UUID/{filesystem[$3]++}END{for (i in filesystem) {print i,filesystem[i]}}&amp;rsquo; /etc/fstab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统计指定文件中单词的出现次数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk ‘{for(i=1;i&amp;lt;=NF;i++){count[$i]++}}END{for(i in count) {print i,count[i]}}’ /etc/fstab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统计出/etc/passwd文件中shell的种类和个数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awk -F: &amp;lsquo;{shell[$NF]++}END{for(A in shell){print A,shell[A]}}&amp;rsquo; /etc/passwd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    重点解析一下这条命令：
      首先，shell[$NF]++这个语句。其中的$NF所代表的是一个字符串，即shell的类型。也就是说在这个数组中的元素名称是shell的名称。而后面的++是对这个数组进行赋值。因为在/etc/passwd 这个文件中的shell类型只有两种，即/bin/bash和/sbin/nologin。也就是说这个数组就只有两个元素，并且它的值是不断被更新的。其次，语句for(A in shell)是设定了A是数组shell中的坐标变量，即是A是元素的名称，shell[A]是数组的值。
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&#34;删除数组变量&#34;&gt;删除数组变量
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;delete array[index]&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;awk的内置函数&#34;&gt;awk的内置函数
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;split(string, array [, fieldsep [, seps ] ])&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能：将string表示的字符串以fieldsep为分隔符进行分隔，并将分隔后的结果保存至array为名的数组中；数组下标为从0开始的序列；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  netstat -tn | awk &amp;#39;/^tcp\&amp;gt;/{split($5,ip,&amp;#34;:&amp;#34;);count[ip[1]]++}END{for(i in count)print i,count[i]}&amp;#39;
  netstat -ant | awk &amp;#39;/:80\&amp;gt;/{split($5,clients,&amp;#34;:&amp;#34;);IP[clients[1]]++}END{for(i in IP){print IP[i],i}}&amp;#39; | sort -rn | head -50
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;length([string])&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能：返回string字串中字符的个数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;substr(string, start [, length])&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能：取string字符串中的子串，从start开始，取length个；start从1开始计数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;system(command)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能：执行系统command并将结果返回至awk命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;systime()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能：取系统当前时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tolower(s)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能：将s中的所有字母转为小写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;toupper(s)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能：将s中的所有字母转为大写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;番外篇&#34;&gt;番外篇！！！！
&lt;/h6&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    Linux Web服务器网站故障分析常用的命令

    系统连接状态篇：
    1.查看TCP连接状态
    netstat -nat |awk ‘{print $6}’|sort|uniq -c|sort -rn

    netstat -n | awk ‘/^tcp/ {++S[$NF]};END {for(a in S) print a, S[a]}’ 或
    netstat -n | awk ‘/^tcp/ {++state[$NF]}; END {for(key in state) print key,&amp;#34;\t&amp;#34;,state[key]}’
    netstat -n | awk ‘/^tcp/ {++arr[$NF]};END {for(k in arr) print k,&amp;#34;t&amp;#34;,arr[k]}’

    netstat -n |awk ‘/^tcp/ {print $NF}’|sort|uniq -c|sort -rn

    netstat -ant | awk ‘{print $NF}’ | grep -v ‘[a-z]‘ | sort | uniq -c



    2.查找请求数请20个IP（常用于查找攻来源）：

    netstat -anlp|grep 80|grep tcp|awk ‘{print $5}’|awk -F: ‘{print $1}’|sort|uniq -c|sort -nr|head -n20

    netstat -ant |awk ‘/:80/{split($5,ip,&amp;#34;:&amp;#34;);++A[ip[1]]}END{for(i in A) print A[i],i}’ |sort -rn|head -n20

    3.用tcpdump嗅探80端口的访问看看谁最高

    tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F&amp;#34;.&amp;#34; ‘{print $1&amp;#34;.&amp;#34;$2&amp;#34;.&amp;#34;$3&amp;#34;.&amp;#34;$4}’ | sort | uniq -c | sort -nr |head -20

    4.查找较多time_wait连接

    netstat -n|grep TIME_WAIT|awk ‘{print $5}’|sort|uniq -c|sort -rn|head -n20

    5.找查较多的SYN连接

    netstat -an | grep SYN | awk ‘{print $5}’ | awk -F: ‘{print $1}’ | sort | uniq -c | sort -nr | more

    6.根据端口列进程

    netstat -ntlp | grep 80 | awk ‘{print $7}’ | cut -d/ -f1
    netstat -tnlp | awk &amp;#39;/22/{split($NF,port,&amp;#34;/&amp;#34;);d[port[1]]++}END{for(i in d)print i}&amp;#39;



    网站日志分析篇1（Apache）：

    1.获得访问前10位的ip地址

    cat access.log|awk ‘{print $1}’|sort|uniq -c|sort -nr|head -10
    cat access.log|awk ‘{counts[$(11)]+=1}; END {for(url in counts) print counts[url], url}’

    2.访问次数最多的文件或页面,取前20

    cat access.log|awk ‘{print $11}’|sort|uniq -c|sort -nr|head -20

    3.列出传输最大的几个exe文件（分析下载站的时候常用）

    cat access.log |awk ‘($7~/.exe/){print $10 &amp;#34; &amp;#34; $1 &amp;#34; &amp;#34; $4 &amp;#34; &amp;#34; $7}’|sort -nr|head -20

    4.列出输出大于200000byte(约200kb)的exe文件以及对应文件发生次数

    cat access.log |awk ‘($10 &amp;gt; 200000 &amp;amp;&amp;amp; $7~/.exe/){print $7}’|sort -n|uniq -c|sort -nr|head -100

    5.如果日志最后一列记录的是页面文件传输时间，则有列出到客户端最耗时的页面

    cat access.log |awk ‘($7~/.php/){print $NF &amp;#34; &amp;#34; $1 &amp;#34; &amp;#34; $4 &amp;#34; &amp;#34; $7}’|sort -nr|head -100

    6.列出最最耗时的页面(超过60秒的)的以及对应页面发生次数

    cat access.log |awk ‘($NF &amp;gt; 60 &amp;amp;&amp;amp; $7~/.php/){print $7}’|sort -n|uniq -c|sort -nr|head -100

    7.列出传输时间超过 30 秒的文件

    cat access.log |awk ‘($NF &amp;gt; 30){print $7}’|sort -n|uniq -c|sort -nr|head -20

    8.统计网站流量（G)

    cat access.log |awk ‘{sum+=$10} END {print sum/1024/1024/1024}’

    9.统计404的连接

    awk ‘($9 ~/404/)’ access.log | awk ‘{print $9,$7}’ | sort

    10. 统计http status

    cat access.log |awk ‘{counts[$(9)]+=1}; END {for(code in counts) print code, counts[code]}&amp;#39;
    cat access.log |awk &amp;#39;{print $9}&amp;#39;|sort|uniq -c|sort -rn

    10.蜘蛛分析，查看是哪些蜘蛛在抓取内容。

    /usr/sbin/tcpdump -i eth0 -l -s 0 -w - dst port 80 | strings | grep -i user-agent | grep -i -E &amp;#39;bot|crawler|slurp|spider&amp;#39;

    网站日分析2(Squid篇）按域统计流量

    zcat squid_access.log.tar.gz| awk &amp;#39;{print $10,$7}&amp;#39; |awk &amp;#39;BEGIN{FS=&amp;#34;[ /]&amp;#34;}{trfc[$4]+=$1}END{for(domain in trfc){printf &amp;#34;%st%dn&amp;#34;,domain,trfc[domain]}}&amp;#39;

    数据库篇
    1.查看数据库执行的sql

    /usr/sbin/tcpdump -i eth0 -s 0 -l -w - dst port 3306 | strings | egrep -i &amp;#39;SELECT|UPDATE|DELETE|INSERT|SET|COMMIT|ROLLBACK|CREATE|DROP|ALTER|CALL&amp;#39;

    系统Debug分析篇
    1.调试命令
    strace -p pid
    2.跟踪指定进程的PID
    gdb -p pid
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;9.gawk应用实现&lt;/p&gt;
&lt;p&gt;（1）内建变量；
1）字段和数据行分隔符变量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    数据字段变量：
        允许你使用美元符号($)和数据字段在数据行中位置对应的数值来引用该数据行中的字段

    字段分隔符：
        默认情况下，字段分隔符是一个空白字符，也就是空格符或制表符(tab)。在命令行下使用命令行参数-F或者在gawk程序中使用特殊的内置变量FS来更改字段分隔符

    变量汇总：
        FIELDWIDTHS         由空格分隔开的定义了每个数据字段确切宽度的一列数字
        FS                  输入字段分隔符
        RS                  输入数据行分隔符
        OFS                 输出字段分隔符
        ORS                 输出数据行分隔符

    变量FS和OFS定义了gawk如何处理数据流中的数据字段

        [root@ahui ~]
        data11,data12,data13,data14,data15
        data21,data22,data23,data24,data25
        data31,data32,data33,data34,data35

        [root@ahui ~]
        data11-data12-data13
        data21-data22-data23
        data31-data32-data33

    FIELDWIDTHS变量允许你读取数据行，而不用字段分隔符来划分字段。一旦设置了FIELDWIDTHS变量，gawk就会忽略FS变量，而根据提供的字段宽度大小来计算字段

        [root@ahui ~]
        1005.3847887.37
        133-2.374893.23
        23987.8237488.9

        [root@ahui ~]
        100 5.384 78 87.37
        133 -2.37 48 93.23
        239 87.82 37 488.9

    默认情况下，gawk将RS和ORS设为换行符，但是有时会碰到数据流中字段占了多行的情况。
    经典的例子就是包含地址和电话号码的数据，其中地址和电话号码各占一行

        [root@ahui ~]
        Riley Mullen
        123 main street
        Chicago, IL 60601
        (312)555-2378

        Frank Williams
        123 main street
        Chicago, IL 60601
        (312)234-3253

        Haley Snell
        123 main street
        Chicago, IL 60601
        (312)123-2374

        [root@ahui ~]
        Riley Mullen  (312)555-2378
        Frank Williams (312)234-3253
        Haley Snell (312)123-2374

        只需把FS变量设置成换行符。这就表明数据流中的每行都是一个单独的字段，每行上的所有数据都属于同一个字段。
        接着只需把RS变量设置成空字符串，然后在数据行间留一个空白行。gawk会把每个空白行当做一个数据行分隔符

2）数据变量：
    ARGC        当前命令行参数个数
    ARGIND      当前文件在ARGV中的位置
    ARGV        包含命令行参数的数组
    CONVFMT     数字的转换格式(参见printf语句)；默认值为%.6 g
    ENVIRON     当前shell环境变量及其值组成的关联数组
    ERRNO       当读取或关闭输入文件发生错误时的系统错误号
    FILENAME    用作gawk输入数据的数据文件的文件名
    FNR         当前数据文件中的数据行数
    IGNORECASE  设成非零值时，忽略gawk命令中出现的字符串的字符大小写
    NF          数据文件中的字段总数
    NR          已处理的输入数据行数目
    OFMT        数字的输出格式；默认值为%.6 g
    RLENGTH     由match函数所匹配的子字符串的长度
    RSTART      由match函数所匹配的子字符串的起始位置

    相关实例：

        [root@ahui ~]
        2 data1

        注意：ARGC变量表明命令行上有两个参数，这包括gawk命令和data1参数(记住，程序脚本并不算参数)。
             ARGV数组从代表该命令的索引0开始，第一个数组值是gawk命令后的第一个命令行参数。


        [root@ahui ~]
        &amp;gt; BEGIN{
        &amp;gt; print ENVIRON[&amp;#34;HOME&amp;#34;]
        &amp;gt; print ENVIRON[&amp;#34;PATH&amp;#34;]
        &amp;gt; }&amp;#39;
        /root
        /usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin

        注意：ENVIRON变量使用关联数组来提取shell环境变量。关联数组用文本作为数组的索引值，而不用数值。可用这种方式来从shell中提取任何环境变量的值来在gawk程序中使用。

        [root@ahui ~]
        root:/bin/bash
        bin:/sbin/nologin
        daemon:/sbin/nologin
        adm:/sbin/nologin
        lp:/sbin/nologin
        sync:/bin/sync
        shutdown:/sbin/shutdown
        halt:/sbin/halt
        mail:/sbin/nologin
        uucp:/sbin/nologin
        operator:/sbin/nologin
        games:/sbin/nologin
        gopher:/sbin/nologin
        ftp:/sbin/nologin
        nobody:/sbin/nologin
        dbus:/sbin/nologin
        usbmuxd:/sbin/nologin
        vcsa:/sbin/nologin
        rpc:/sbin/nologin
        rtkit:/sbin/nologin
        avahi-autoipd:/sbin/nologin
        abrt:/sbin/nologin
        rpcuser:/sbin/nologin
        nfsnobody:/sbin/nologin
        haldaemon:/sbin/nologin
        gdm:/sbin/nologin
        ntp:/sbin/nologin
        apache:/sbin/nologin
        saslauth:/sbin/nologin
        postfix:/sbin/nologin
        pulse:/sbin/nologin
        sshd:/sbin/nologin
        tcpdump:/sbin/nologin
        ahui:/bin/bash

        注意：NF变量允许你指定数据行中的最后一个数据字段，即NF变量含有数据文件中最后一个数据字段的数字值。可以在它前面加个美元符将它用作字段变量。

        [root@ahui ~]
        &amp;gt; BEGIN{FS=&amp;#34;,&amp;#34;}
        &amp;gt; {print $1, &amp;#34;FNR=&amp;#34;FNR, &amp;#34;NR=&amp;#34;NR}
        &amp;gt; END{print &amp;#34;There were&amp;#34;,NR,&amp;#34;records processed&amp;#34;}&amp;#39; data1 data1
        data11 FNR=1 NR=1
        data21 FNR=2 NR=2
        data31 FNR=3 NR=3
        data11 FNR=1 NR=4
        data21 FNR=2 NR=5
        data31 FNR=3 NR=6
        There were 6 records processed

        注意：FNR变量的值在gawk处理第二个文件时被重置了,而NR变量则在进入第二个数据文件后继续计数
             注意变量赋值的语法结构：&amp;#34;FNR=&amp;#34;FNR。引号位置错了会出现语法错误
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（2）自定义变量
1）在脚本中给变量赋值&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    [root@ahui ~]# gawk &amp;#39;
    &amp;gt; BEGIN{
    &amp;gt; testing=&amp;#34;This is a test&amp;#34;
    &amp;gt; print testing
    &amp;gt; }&amp;#39;
    This is a test

    注意：gawk编程语言包含了用来处理数字值的标准数学操作符，其中包括求余符号(%)和幂运算符号(^或**)

2）在命令行上给变量赋值

    [root@ahui ~]# cat script1
    BEGIN{FS=&amp;#34;,&amp;#34;}
    {print $n}

    [root@ahui ~]# gawk -f script1 n=2 data1
    data12
    data22
    data32

    这个特性允许你改变脚本的行为而不需要修改实际的脚本代码。
    使用命令行参数来定义变量值会有个问题。在你设置了变量后，这个值在代码的BEGIN部分不可用

    [root@ahui ~]# cat script2
    BEGIN{print &amp;#34;The starting value is&amp;#34;,n; FS=&amp;#34;,&amp;#34;}
    {print $n}

    [root@ahui ~]# gawk -f script2 n=3 data1
    The starting value is
    data13
    data23
    data33

    可以用-v命令行参数来解决这个问题。它允许你指定在BEGIN代码部分之前设定的变量。在命令行上，-v命令行参数必须放在脚本代码之前

    [root@ahui ~]# gawk -v n=3 -f script2 data1
    The starting value is 3
    data13
    data23
    data33
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（3）处理数组&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gawk编程语言使用关联数组来提供数组功能，关联数组跟数字数组不同之处在于它的索引值可以是任意文本字符串。每个索引字符串都必须是唯一的，并唯一地标识赋给它的数据元素。

1）定义数组变量
    数组变量赋值的格式如下；
        var[index] = element
    其中var是变量名，index是关联数组的索引值，element是数据元素值。

    [root@ahui ~]
    &amp;gt; capital[&amp;#34;Illinois&amp;#34;] = &amp;#34;Springfiled&amp;#34;
    &amp;gt; print capital[&amp;#34;Illinois&amp;#34;]
    &amp;gt; }&amp;#39;
    Springfiled

2）遍历数组变量
    可以用for语句的一种特殊形式：
        for (var in array)
        {
            statements
        }
    这个for语句会在每次将关联数组array的下一个索引值赋给变量var时，执行一遍statements。重要的是记住这个变量是索引值而不是数据元素值。

        [root@ahui ~]# gawk &amp;#39;BEGIN{
        &amp;gt; var[&amp;#34;a&amp;#34;] = 1
        &amp;gt; var[&amp;#34;b&amp;#34;] = 2
        &amp;gt; var[&amp;#34;c&amp;#34;] = 3
        &amp;gt; var[&amp;#34;d&amp;#34;] = 4
        &amp;gt; for (test in var)
        &amp;gt; {
        &amp;gt; print &amp;#34;Index:&amp;#34;,test,&amp;#34; - value:&amp;#34;,var[test]
        &amp;gt; }
        &amp;gt; }&amp;#39;
        Index: a  - value: 1
        Index: b  - value: 2
        Index: c  - value: 3
        Index: d  - value: 4

3）删除数组变量
    从关联数组中删除数组索引要用一个特别的命令：
        delete array[index]

    删除命令会从数组中删除关联索引值和相关的数据元素值
        [root@ahui ~]# gawk &amp;#39;BEGIN{
        &amp;gt; var[&amp;#34;a&amp;#34;] = 1
        &amp;gt; var[&amp;#34;g&amp;#34;] = 2
        &amp;gt; for (test in var)
        &amp;gt; {
        &amp;gt; print &amp;#34;Index:&amp;#34;,test,&amp;#34; - value:&amp;#34;,var[test]
        &amp;gt; }
        &amp;gt; delete var[&amp;#34;g&amp;#34;]
        &amp;gt; print &amp;#34;---&amp;#34;
        &amp;gt; for (test in var)
        &amp;gt; print &amp;#34;Index:&amp;#34;,test,&amp;#34; - Value:&amp;#34;,var[test]
        &amp;gt; }&amp;#39;
        Index: a  - value: 1
        Index: g  - value: 2
        ---
        Index: a  - Value: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（4）使用模式&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1）正则表达式
    在使用正则表达式时，正则表达式必须出现在它要控制的程序脚本的左花括号前：

        [root@ahui ~]
        data11

2）匹配操作符
    匹配操作符(matching operate)允许将正则表达式限定在数据行中的特定数据字段。匹配操作符是波浪线(~)。
        $1 ~ /^data/
    $1变量代表数据行中的第一个数据字段，这个表达式会过滤出第一个字段以文本data开头的所有数据行。

        [root@ahui ~]
        data21,data22,data23,data24,data25

    也可以使用!符号来排除正则表达式的匹配：
        $1 !~ /expression/

        [root@ahui ~]
        bin:x:1:1:bin:/bin:/sbin/nologin bin:x:1:1:bin:/bin:/sbin/nologin
        daemon:x:2:2:daemon:/sbin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin
        adm:x:3:4:adm:/var/adm:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin
        lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
        sync:x:5:0:sync:/sbin:/bin/sync sync:x:5:0:sync:/sbin:/bin/sync
        shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
        halt:x:7:0:halt:/sbin:/sbin/halt halt:x:7:0:halt:/sbin:/sbin/halt
        mail:x:8:12:mail:/var/spool/mail:/sbin/nologin mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
        uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin
        games:x:12:100:games:/usr/games:/sbin/nologin games:x:12:100:games:/usr/games:/sbin/nologin
        gopher:x:13:30:gopher:/var/gopher:/sbin/nologin gopher:x:13:30:gopher:/var/gopher:/sbin/nologin
        ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
        nobody:x:99:99:Nobody:/:/sbin/nologin nobody:x:99:99:Nobody:/:/sbin/nologin
        dbus:x:81:81:System bus:/:/sbin/nologin
        usbmuxd:x:113:113:usbmuxd user:/:/sbin/nologin
        vcsa:x:69:69:virtual owner:/dev:/sbin/nologin
        rpc:x:32:32:Rpcbind Daemon:/var/cache/rpcbind:/sbin/nologin
        rtkit:x:499:497:RealtimeKit:/proc:/sbin/nologin rtkit:x:499:497:RealtimeKit:/proc:/sbin/nologin
        avahi-autoipd:x:170:170:Avahi Stack:/var/lib/avahi-autoipd:/sbin/nologin
        abrt:x:173:173::/etc/abrt:/sbin/nologin abrt:x:173:173::/etc/abrt:/sbin/nologin
        rpcuser:x:29:29:RPC User:/var/lib/nfs:/sbin/nologin
        nfsnobody:x:65534:65534:Anonymous User:/var/lib/nfs:/sbin/nologin
        haldaemon:x:68:68:HAL daemon:/:/sbin/nologin
        gdm:x:42:42::/var/lib/gdm:/sbin/nologin gdm:x:42:42::/var/lib/gdm:/sbin/nologin
        ntp:x:38:38::/etc/ntp:/sbin/nologin ntp:x:38:38::/etc/ntp:/sbin/nologin
        apache:x:48:48:Apache:/var/www:/sbin/nologin apache:x:48:48:Apache:/var/www:/sbin/nologin
        saslauth:x:498:76:Saslauthd user:/var/empty/saslauth:/sbin/nologin
        postfix:x:89:89::/var/spool/postfix:/sbin/nologin postfix:x:89:89::/var/spool/postfix:/sbin/nologin
        pulse:x:497:496:PulseAudio Daemon:/var/run/pulse:/sbin/nologin
        sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
        tcpdump:x:72:72::/:/sbin/nologin tcpdump:x:72:72::/:/sbin/nologin
        ahui:x:500:500:ahuihaerbin:/home/ahui:/bin/bash ahui:x:500:500:ahuihaerbin:/home/ahui:/bin/bash

3）数学表达式

    可以使用任意的普通股数学比较表达式
        x == y：值x等于y
        x &amp;lt;= y：
        x &amp;lt; y
        x &amp;gt;= y
        x &amp;gt; y

    可以对文本数据使用表达式，但是它跟正则表达式不同，表达式必须完全匹配。

        [root@ahui ~]

        [root@ahui ~]
        data11
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（5）结构化命令
1）if语句
格式：
if (condition)
statement1
或
if (condition) statement1&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    [root@ahui ~]# cat data4
    10
    5
    13
    50
    34

    [root@ahui ~]# gawk &amp;#39;{
    &amp;gt; if ($1 &amp;gt; 20)
    &amp;gt; {
    &amp;gt;   x = $1 * 2
    &amp;gt;   print x
    &amp;gt; }
    &amp;gt; }&amp;#39; data4
    100
    68

    gawk的if语句也支持else子句，允许在if语句条件不成立的情况下执行一条或多条语句

    [root@ahui ~]# gawk &amp;#39;{
    &amp;gt; if ($1 &amp;gt; 20)
    &amp;gt; {
    &amp;gt;   x = $1 * 2
    &amp;gt;   print x
    &amp;gt; } else
    &amp;gt; {
    &amp;gt;   x = $1 / 2
    &amp;gt;   print x
    &amp;gt; }}&amp;#39; data4
    5
    2.5
    6.5
    100
    68

    也可以在单行上使用else子句，但必须在if语句部分使用分号：

        if (condition) statement1; else statement2

    [root@ahui ~]# gawk &amp;#39;{if ($1 &amp;gt; 20) print $1 * 2; else print $1 / 2}&amp;#39; data4
    5
    2.5
    6.5
    100
    68


2）while语句

    while语句的格式：

        while (condition)
        {
        statements
        }

    while循环允许遍历一组数据，并检查结束迭代的条件

    [root@ahui ~]# gawk &amp;#39;{
    total = 0
    i = 1
    while (i &amp;lt; 4)
    {
       total += $i
       i++
    }
    avg = total / 3
    print &amp;#34;Average:&amp;#34; ,avg
    }&amp;#39; data5
    Average: 128.333
    Average: 137.667
    Average: 176.667

    [root@ahui ~]# gawk &amp;#39;{
    &amp;gt; total = 0
    &amp;gt; i = 1
    &amp;gt; while (i &amp;lt; 4)
    &amp;gt; {
    &amp;gt;   total += $i
    &amp;gt;   if (i == 2)
    &amp;gt;      break
    &amp;gt;   i++
    &amp;gt; }
    &amp;gt; avg = total / 2
    &amp;gt; print &amp;#34;The average of the first two data elements is:&amp;#34;,avg
    &amp;gt; }&amp;#39; data5
    The average of the first two data elements is: 125
    The average of the first two data elements is: 136.5
    The average of the first two data elements is: 157.5

3）do-while语句
    do-while语句类似于while语句，但会在检查条件语句之前执行命令。格式为：
        do
        {
            statement
        } while (condition)

    这种格式保证了语句会在条件被评估之前至少执行一次

4）for语句
    gawk支持C风格的for循环：
        for( variable assignment; condition; iteration process)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（6）格式化打印
注意到print语句在gawk如何显示数据上并未提供多少控制。你能做的大概只是控制输出字段分隔符(OFS)。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;因此要用到格式化打印，我们需要printf命令。格式：
    printf &amp;#34;format string&amp;#34;, var1, var2...

format string是格式化输出地关键。它会用到文本元素和格式化指定符来具体指定如何呈现格式化输出。

格式化指定符采用如下格式：
    %[modifier]control-letter
其中control-letter是指明显示什么类型数据值的单字符码，而modifier定义了另一个可选的格式化特性。

    c           将一个数作为ASCII字符显示
    d           显示一个整数值
    i           显示一个整数值(跟d一样)
    e           用科学计数法显示一个数
    f           显示一个浮点数
    g           用科学计数法或浮点数中较短的显示
    o           显示一个八进制值
    s           显示一个文本字符串
    x           显示一个十六进制值
    X           显示一个十六进制值，但用大写字母A-F

除了控制字母外，还有3种修饰符可以用来进一步控制输出

    width：
        指定了输出字段最小宽度的数字值。如果输出短于这个值，printf会向右对齐，并用空格来填充这段空间。如果输出比指定的宽度还要长，它就会覆盖width值。
    prec：
        指定了浮点数中小数点后面位数的数字值，或者文本字符串中显示的最大字符数。
    -(减号)：
        减号指明在向格式化空间中放入数据时采用左对齐而不是右对齐

        [root@ahui ~]# gawk &amp;#39;BEGIN{FS=&amp;#34;\n&amp;#34;; RS=&amp;#34;&amp;#34;} {printf &amp;#34;%s %s\n&amp;#34;, $1, $4}&amp;#39; data2
        Riley Mullen  (312)555-2378
        Frank Williams (312)234-3253
        Haley Snell (312)123-2374

    注意：我们需要自己手动在printf命令的末尾添加换行符来生成新行。没加的话，printf命令会继续用同一行来打印后续输出。

    如果你需要用几个单独的printf命令来在同一行上打印多个输出，它会非常有用：

        [root@ahui ~]# gawk &amp;#39;BEGIN{FS=&amp;#34;,&amp;#34;} {printf &amp;#34;%s &amp;#34;, $1} END{printf &amp;#34;\n&amp;#34;}&amp;#39; data1
        data11 data21 data31

    接着我们用修饰符来格式化第一个字符串值：

        [root@ahui ~]# gawk &amp;#39;BEGIN{FS=&amp;#34;\n&amp;#34;; RS=&amp;#34;&amp;#34;} {printf &amp;#34;%16s  %s\n&amp;#34;,$1, $4}&amp;#39; data2
            Riley Mullen  (312)555-2378
          Frank Williams  (312)234-3253
             Haley Snell  (312)123-2374

    通过添加一个值为16的修饰符，我们强制第一个字符串的输出采用16位字符。默认情况下，printf命令使用右对齐来将数据放到格式化空间中。要改成左对齐，只要给修饰符加一个减号就可以了。

        [root@ahui ~]# gawk &amp;#39;BEGIN{FS=&amp;#34;\n&amp;#34;; RS=&amp;#34;&amp;#34;} {printf &amp;#34;%-16s  %s\n&amp;#34;, $1, $4}&amp;#39; data2
        Riley Mullen      (312)555-2378
        Frank Williams    (312)234-3253
        Haley Snell       (312)123-2374
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（7）自定义函数
1）定义函数
要定义自己的函数，你必须使用function关键字：
function name([variables])
{
statements
}&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    函数名必须能够唯一标识函数

2）使用自定义函数
    在定义函数时，它必须出现在所有代码块之前(包括BEGIN代码块)。

        [root@ahui ~]
        &amp;gt; function myprint()
        &amp;gt; {
        &amp;gt;     printf &amp;#34;%-16s - %s\n&amp;#34;, $1, $4
        &amp;gt; }
        &amp;gt; BEGIN{FS=&amp;#34;\n&amp;#34;; RS=&amp;#34;&amp;#34;}
        &amp;gt; {
        &amp;gt;     myprint()
        &amp;gt; }&amp;#39; data2
        Riley Mullen     - (312)555-2378
        Frank Williams   - (312)234-3253
        Haley Snell      - (312)123-2374

3）创建函数库
    首先创建一个存储所有gawk函数的文件

        [root@ahui ~]
        function myprint()
        {
            printf &amp;#34;%-16s - %s\n&amp;#34;, $1, $4
        }
        function myrand()
        {
            return int(limit * rand())
        }
        function printthird()
        {
            printf $3
        }

    注意：不能将-f命令行参数和内联gawk脚本放到一起使用，不过可以在同一个命令行中使用多个-f参数

        [root@ahui ~]
        BEGIN{ FS=&amp;#34;\n&amp;#34;; RS=&amp;#34;&amp;#34; }
        {
            myprint()
        }

        [root@ahui ~]
        Riley Mullen     - (312)555-2378
        Frank Williams   - (312)234-3253
        Haley Snell      - (312)123-2374
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>sed</title>
        <link>/post/tech/sed/</link>
        <pubDate>Fri, 24 Dec 2021 15:54:47 +0800</pubDate>
        
        <guid>/post/tech/sed/</guid>
        <description>&lt;h1 id=&#34;sed&#34;&gt;sed
&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[地址定界] command&amp;#39;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;options:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -n：不输出模式空间内容到屏幕，即不自动打印，只打印匹配到的行
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -e：多点编辑，对每行处理时，可以有多个Script
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -f：把Script写到文件当中，在执行sed时-f 指定文件路径，如果是多个Script，换行写
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -r：支持扩展的正则表达式
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -i：直接将处理的结果写入文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -i.bak：在将处理的结果写入文件之前备份一份
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;地址定界:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 不给地址：对全文进行处理
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 单地址：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#: 指定的行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /pattern/：被此处模式所能够匹配到的每一行
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 地址范围：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#,#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#,+#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /pat1/,/pat2/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#,/pat1/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ~：步进
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sed -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1~2p&amp;#39;&lt;/span&gt;  只打印奇数行 （1~2 从第1行，一次加2行）
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sed -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2~2p&amp;#39;&lt;/span&gt;  只打印偶数行
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;command:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; d：删除模式空间匹配的行，并立即启用下一轮循环
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; p：打印当前模式空间内容，追加到默认输出之后
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; a：在指定行后面追加文本，支持使用&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;实现多行追加
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; i：在行前面插入文本，支持使用&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;实现多行追加
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; c：替换行为单行或多行文本，支持使用&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;实现多行追加
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; w：保存模式匹配的行至指定文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; r：读取指定文件的文本至模式空间中匹配到的行后
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;：为模式空间中的行打印行号
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; !：模式空间中匹配行取反处理
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; s///：查找替换，支持使用其它分隔符，如：s@@@，s###；
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 加g表示行内全局替换；
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 在替换时，可以加一下命令，实现大小写转换
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\l&lt;/span&gt;：把下个字符转换成小写。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\L&lt;/span&gt;：把replacement字母转换成小写，直到&lt;span style=&#34;color:#ae81ff&#34;&gt;\U&lt;/span&gt;或&lt;span style=&#34;color:#ae81ff&#34;&gt;\E&lt;/span&gt;出现。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\u&lt;/span&gt;：把下个字符转换成大写。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\U&lt;/span&gt;：把replacement字母转换成大写，直到&lt;span style=&#34;color:#ae81ff&#34;&gt;\L&lt;/span&gt;或&lt;span style=&#34;color:#ae81ff&#34;&gt;\E&lt;/span&gt;出现。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\E&lt;/span&gt;：停止以&lt;span style=&#34;color:#ae81ff&#34;&gt;\L&lt;/span&gt;或&lt;span style=&#34;color:#ae81ff&#34;&gt;\U&lt;/span&gt;开始的大小写转换
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实战&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# options&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat demo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed &amp;#34;/aaa/p&amp;#34; demo  #匹配到的行会打印一遍，不匹配的行也会打印&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -n &amp;#34;/aaa/p&amp;#34; demo  #-n不显示没匹配的行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -e &amp;#34;s/a/A/&amp;#34; -e &amp;#34;s/b/B/&amp;#34; demo  #-e多点编辑&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat sedscript.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s/A/a/g
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -f sedscript.txt demo  #-f使用文件处理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaBBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -i.bak &amp;#34;s/a/A/g&amp;#34; demo  #-i直接对文件进行处理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat demo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AAA
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat demo.bak&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 地址界定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat demo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -n &amp;#34;p&amp;#34; demo  #不指定行，打印全文&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed &amp;#34;2s/b/B/g&amp;#34; demo  #替换第2行的b-&amp;gt;B&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BBBB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -n &amp;#34;/aaa/p&amp;#34; demo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -n &amp;#34;1,2p&amp;#34; demo  #打印1-2行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -n &amp;#34;/aaa/,/DD/p&amp;#34; demo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -n &amp;#34;2,/DD/p&amp;#34; demo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed &amp;#34;1~2s/[aA]/E/g&amp;#34; demo  #将奇数行的a或A替换为E&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EEE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EEBBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat demo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed &amp;#34;2d&amp;#34; demo  #删除第2行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -n &amp;#34;2p&amp;#34; demo  #打印第2行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed &amp;#34;2a123&amp;#34; demo  #在第2行后加123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed &amp;#34;1i123&amp;#34; demo  #在第1行前加123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed &amp;#34;3c123\n456&amp;#34; demo  #替换第3行内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;456&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -n &amp;#34;3w/root/demo3&amp;#34; demo  #保存第3行的内容到demo3文件中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat demo3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed &amp;#34;1r/root/demo3&amp;#34; demo  #读取demo3的内容到第1行后&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -n &amp;#34;=&amp;#34; demo  #=打印行号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed -n &amp;#39;2!p&amp;#39; demo  #打印除了第2行的内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed &amp;#39;s@[a-z]@\u&amp;amp;@g&amp;#39; demo  #将全文的小写字母替换为大写字母&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AAA
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BBBB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AABBCCDD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;高级编辑命令
（1）格式&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; h：把模式空间中的内容覆盖至保持空间中
 H：把模式空间中的内容追加至保持空间中
 g：从保持空间取出数据覆盖至模式空间
 G：从保持空间取出内容追加至模式空间
 x：把模式空间中的内容与保持空间中的内容进行互换
 n：读取匹配到的行的下一行覆盖 至模式空间
 N：读取匹配到的行的下一行追加 至模式空间
 d：删除模式空间中的行
 D：删除 当前模式空间开端至\n 的内容（不再传 至标准输出），放弃之后的命令，但是对剩余模式空间重新执行sed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（2）一个案例+示意图演示
① 案例：倒序输出文本内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat num.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;One
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Three
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@along ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sed &amp;#39;1!G;h;$!d&amp;#39; num.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Three
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;One
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;② 示意图如下：
&lt;img src=&#34;/post/tech/sed/1.png&#34;
	width=&#34;997&#34;
	height=&#34;420&#34;
	srcset=&#34;/post/tech/sed/1_hu_a0afa30f3124a0e9.png 480w, /post/tech/sed/1_hu_1d21390242d0ad9a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;237&#34;
		data-flex-basis=&#34;569px&#34;
	
&gt;
③ 总结模式空间与保持空间关系：&lt;/p&gt;
&lt;p&gt;保持空间是模式空间一个临时存放数据的缓冲区，协助模式空间进行数据处理&lt;/p&gt;
&lt;p&gt;（3）演示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; |sed -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;n;p&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 显示偶数行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; |sed  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1!G;h;$!d&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 倒序显示&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; |sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;H;n;d&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 显示奇数行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; |sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N;D&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 显示最后一行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; |sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 每行之间加空行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; |sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 把每行内容替换成空行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; |sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/^$/d;G&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 确保每一行下面都有一个空行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
