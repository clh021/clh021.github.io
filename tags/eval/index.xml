<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Eval on 良宏</title>
        <link>/tags/eval/</link>
        <description>Recent content in Eval on 良宏</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 04 Jun 2019 15:57:25 +0800</lastBuildDate><atom:link href="/tags/eval/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Eval PHP</title>
        <link>/post/tech/eval.php/</link>
        <pubDate>Tue, 04 Jun 2019 15:57:25 +0800</pubDate>
        
        <guid>/post/tech/eval.php/</guid>
        <description>&lt;p&gt;一&lt;/p&gt;
&lt;p&gt;php后门木马常用的函数大致上可分为四种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;执行系统命令: system, passthru, shell_exec, exec, popen, proc_open&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码执行与加密: eval, assert, call_user_func,base64_decode, gzinflate, gzuncompress, gzdecode, str_rot13&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件包含与生成: require, require_once, include, include_once, file_get_contents, file_put_contents, fputs, fwrite&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.htaccess: SetHandler, auto_prepend_file, auto_append_file&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二&lt;/p&gt;
&lt;p&gt;想找一个 关键词是“hellow word” 在哪些文件中有，我们用grep命令&lt;/p&gt;
&lt;p&gt;grep &amp;ndash;color -i -r -n &amp;ldquo;hellow word&amp;rdquo;  /data/www/&lt;/p&gt;
&lt;p&gt;这样就能搜索出来 文件中包含关键词的文件&lt;/p&gt;
&lt;p&gt;&amp;ndash;color是关键词标红&lt;/p&gt;
&lt;p&gt;-i是不区分大小写
-r是包含子目录的搜索
-d skip忽略子目录&lt;/p&gt;
&lt;p&gt;可以用以上命令查找网站项目里的带有挂马的文件&lt;/p&gt;
&lt;p&gt;三&lt;/p&gt;
&lt;p&gt;.两个查后门的实用linux命令：
find /data/web/website/ -iname &lt;em&gt;.php -mtime -35 找出/data/web/website/目录下 35分钟前新建的php
find /data/web/website/ -name “&lt;/em&gt;.php” | xargs grep “eval($_POST[” 找出/data/web/website/ 里面源码包含eval($_POST[的php文件  (注意：POST后面可能需要转义符“\”，否则有可能不能执行）&lt;/p&gt;
&lt;p&gt;四.&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;p&gt;注入漏洞eval(base64_decode&lt;/p&gt;
&lt;p&gt;grep &amp;ndash;color -i -r -n &amp;ldquo;eval&amp;rdquo;  /data/www/   找出来对比以前正常的代码，看是否正常。然后用stat查看这个木马文件的修改时间，最后去寻找WEB日志，找出木马从哪里进来的&lt;/p&gt;
&lt;p&gt;eg: grep &amp;ndash;color -i -r -n &amp;rsquo;eval($_POST&amp;rsquo;  cncar/ &lt;/p&gt;
&lt;p&gt;五：&lt;/p&gt;
&lt;p&gt;实用查找PHP木马命令：&lt;/p&gt;
&lt;p&gt;查找PHP木马&lt;/p&gt;
&lt;h1 id=&#34;find---name-php-xargs-egrep-phpspyc99shmilw0rmevalgunerpressevalbase64_decoolcodespider_bc-tmpphptxt&#34;&gt;find ./ -name &amp;ldquo;*.php&amp;rdquo; |xargs egrep &amp;ldquo;phpspy|c99sh|milw0rm|eval(gunerpress|eval(base64_decoolcode|spider_bc&amp;rdquo;&amp;gt; /tmp/php.txt
&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&#34;grep--r-includephp-a-zeval_post---tmpevaltxt&#34;&gt;grep -r &amp;ndash;include=*.php  &amp;lsquo;[^a-z]eval($_POST&amp;rsquo; . &amp;gt; /tmp/eval.txt
&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&#34;grep--r-includephp-_post&#34;&gt;grep -r &amp;ndash;include=&lt;em&gt;.php  &amp;lsquo;file_put_contents(.&lt;/em&gt;$_POST
&lt;/h1&gt;&lt;p&gt;.∗
.∗
);&amp;rsquo; . &amp;gt; /tmp/file_put_contents.txt
 &lt;/p&gt;
&lt;h1 id=&#34;find---name-php--type-f--print0--xargs--0-egrep-phpspyc99shmilw0rmevalgzuncompressbase64_decoolcodeevalbase64_decoolcodespider_bcgzinflate--awk--f-print-1--sort--uniq&#34;&gt;find ./ -name &amp;ldquo;*.php&amp;rdquo; -type f -print0 | xargs -0 egrep &amp;ldquo;(phpspy|c99sh|milw0rm|eval(gzuncompress(base64_decoolcode|eval(base64_decoolcode|spider_bc|gzinflate)&amp;rdquo; | awk -F: &amp;lsquo;{print $1}&amp;rsquo; | sort | uniq
&lt;/h1&gt;&lt;p&gt;查找最近一天被修改的PHP文件&lt;/p&gt;
&lt;p&gt;#   find -mtime -1 -type f -name *.php
修改网站的权限&lt;/p&gt;
&lt;h1 id=&#34;find--type-f--name-php--exec-chmod-444--&#34;&gt;find -type f -name *.php -exec chmod 444 {} ;
&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&#34;find---type-d--exec-chmod-555-&#34;&gt;find ./ -type d -exec chmod 555{} ;
&lt;/h1&gt;&lt;p&gt;假设最后更新是10天前我们可以查找10天内生成的可以php文件:&lt;/p&gt;
&lt;p&gt;find /var/www/ -name “*.php” -mtime -10&lt;/p&gt;
&lt;p&gt;也可以通过关键字的形式查找 常见的木马常用代码函数 eval,shell_exec,passthru,popen,system&lt;/p&gt;
&lt;p&gt;find /var/www/ -name “&lt;em&gt;.php” |xargs grep “eval” |more
find /var/www/ -name “&lt;/em&gt;.php” |xargs grep “shell_exec” |more
find /var/www/ -name “*.php” |xargs grep “passthru” |more&lt;/p&gt;
&lt;p&gt;还有查看access.log 当然前提是你网站的所有php文件不是很多的情况下&lt;/p&gt;
&lt;p&gt;一句话查找PHP木马&lt;/p&gt;
&lt;h1 id=&#34;find---name-php-xargs-egrep-phpspyc99shmilw0rmevalgunerpressevalbase64_decodespider_bc-tmpphptxt&#34;&gt;find ./ -name “*.php” |xargs egrep “phpspy|c99sh|milw0rm|eval(gunerpress|eval(base64_decode|spider_bc”&amp;gt; /tmp/php.txt
&lt;/h1&gt;&lt;h1 id=&#34;grep--r-includephp-a-zeval_post---tmpevaltxt-1&#34;&gt;grep -r –include=*.php ’[^a-z]eval($_POST’ . &amp;gt; /tmp/eval.txt
&lt;/h1&gt;&lt;h1 id=&#34;grep--r-includephp-file__post---tmpfile_put_contentstxt&#34;&gt;grep -r –include=&lt;em&gt;.php ’file_put_contents(.&lt;/em&gt;$_POST[.*]);’ . &amp;gt; /tmp/file_put_contents.txt
&lt;/h1&gt;&lt;h1 id=&#34;find---name-php--type-f--print0--xargs--0-egrep-phpspyc99shmilw0rmevalgzuncompressbase64_decodeevalbase64_decodespider_bcgzinflate--awk--f-print-1--sort--uniq&#34;&gt;find ./ -name “*.php” -type f -print0 | xargs -0 egrep “(phpspy|c99sh|milw0rm|eval(gzuncompress(base64_decode|eval(base64_decode|spider_bc|gzinflate)” | awk -F: ‘{print $1}’ | sort | uniq
&lt;/h1&gt;&lt;p&gt;查找最近一天被修改的PHP文件&lt;/p&gt;
&lt;h1 id=&#34;find--mtime--1--type-f--name-php&#34;&gt;find -mtime -1 -type f -name *.php
&lt;/h1&gt;&lt;p&gt;六&lt;/p&gt;
&lt;p&gt;以下其实是多余的操作了其实，但是还是有值得看的地方&lt;/p&gt;
&lt;p&gt;，检查代码。&lt;/p&gt;
&lt;p&gt;肯定不是一个文件一个文件的检查，Linxu有强悍的命令&lt;/p&gt;
&lt;p&gt;grep ‘eval’ * -R 全盘搜索当前目录所有文件（包含子目录）中带有eval的文件，这条可以快速查找到被挂马的文件。&lt;/p&gt;
&lt;p&gt;关于eval，请自行google一句话php代码。&lt;/p&gt;
&lt;p&gt;2，查看日志。&lt;/p&gt;
&lt;p&gt;不到这个时候不知道日志的可贵啊。&lt;/p&gt;
&lt;p&gt;还是以grep命令为主。&lt;/p&gt;
&lt;p&gt;思路：负责的站点是Linux，只开了2个端口，一个22和80，外部的执行命令是由从80端口进来，Selinux报httpd访问/boot文件，确认被挂马。而所有的命令执行必须POST提交给执行的文件。所以，查找日志中所有的POST记录。&lt;/p&gt;
&lt;p&gt;cat access_log_20120823.log | grep ‘POST’ | grep -v ‘反向查找’ | less，通过grep -v排除正常post，egrep也支持正则，但是太复杂了，看懂不知道怎么运用。&lt;/p&gt;
&lt;p&gt;（这里不建议用cat，用tail可以追加一个文件来看）&lt;/p&gt;
&lt;p&gt;这可以防患于未然，防止不知道哪天又被人黑进来了。每天看一眼日志。&lt;/p&gt;
&lt;p&gt;3，对于网页目录，只给apache用户rx权限，不要给w权限，目录设置要加上rx，不要给w，个别文件除外。所以，配合2使用，Linux下可以快速过滤刷选出来不规则的POST请求。&lt;/p&gt;
&lt;h2 id=&#34;综合12其实就可以快速查找被黑的页面被修改的文件替换干净的代码&#34;&gt;综合1，2其实就可以快速查找被黑的页面，被修改的文件替换干净的代码。
&lt;/h2&gt;&lt;p&gt;作者：MiltonZhong
来源：CSDN
原文：https://blog.csdn.net/MiltonZhong/article/details/9717179
版权声明：本文为博主原创文章，转载请附上博文链接！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@\$\_\(\$\_
\$\_=&amp;#34;&amp;#34;
\${&amp;#39;\_&amp;#39;
@preg\_replace\((&amp;#34;)*\/(\S)*\/e(&amp;#34;)*,\$_POST\[\S*\]
base64\_decode\(\$\_
&amp;#39;e&amp;#39;\.&amp;#39;v&amp;#39;\.&amp;#39;a&amp;#39;\.&amp;#39;l&amp;#39;
&amp;#34;e&amp;#34;\.&amp;#34;v&amp;#34;\.&amp;#34;a&amp;#34;\.&amp;#34;l&amp;#34;
&amp;#34;e&amp;#34;\.&amp;#34;v&amp;#34;\.&amp;#34;a&amp;#34;\.&amp;#34;l&amp;#34;
\$(\w)+\(&amp;#34;\/(\S)+\/e
\(array\)\$_(POST|GET|REQUEST|COOKIE)
\$(\w)+\(\${
@\$\_=
\$\_=\$\_
chr\((\d)+\)\.chr\((\d)+\)
phpjm\.net
cha88\.cn
c99shell
phpspy
Scanners
cmd\.php
str_rot13
webshell
EgY_SpIdEr
tools88\.com
SECFORCE
eval\((&amp;#39;|&amp;#34;)\?&amp;gt;
&amp;#34;&amp;gt;
preg_replace\(&amp;#34;\/\.\*\/e&amp;#34;
assert\((&amp;#39;|&amp;#34;|\s*)\$
eval\(gzinflate\(
gzinflate\(base64_decode\(
eval\(base64_decode\(
eval\(gzuncompress\(
ies&amp;#34;,gzuncompress\(\$
eval\(gzdecode\(
eval\(str_rot13\(
gzuncompress\(base64_decode\(
base64_decode\(gzuncompress\(
eval\((&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)
assert\((&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)
require\((&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)
require_once\((&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)
include\((&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)
include_once\((&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)
call_user_func\((&amp;#34;|&amp;#39;)assert(&amp;#34;|&amp;#39;)
call_user_func\((&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)
\$_(POST|GET|REQUEST|COOKIE)\[([^\]]+)\]\((&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)\[
echo\(file_get_contents\((&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)
file_put_contents\((&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)\[([^\]]+)\],(&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)
fputs\(fopen\((.+),(&amp;#39;|&amp;#34;)w(&amp;#39;|&amp;#34;)\),(&amp;#39;|&amp;#34;|\s*)\$_(POST|GET|REQUEST|COOKIE)\[
SetHandlerapplication\/x-httpd-php
php_valueauto_prepend_file
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;find ./ -name &amp;#34;*.php&amp;#34; |xargs egrep &amp;#34;phpspy|c99sh|milw0rm|eval\(gunerpress|eval\(base64_decoolcode|spider_bc&amp;#34;&amp;gt; /tmp/php.txt
grep -r --include=*.php  &amp;#39;[^a-z]eval($_POST&amp;#39; . &amp;gt; /tmp/eval.txt
grep -r --include=*.php  &amp;#39;file_put_contents(.*$_POST\[.*\]);&amp;#39; . &amp;gt; /tmp/file_put_contents.txt
find ./ -name &amp;#34;*.php&amp;#34; -type f -print0 | xargs -0 egrep &amp;#34;(phpspy|c99sh|milw0rm|eval\(gzuncompress\(base64_decoolcode|eval\(base64_decoolcode|spider_bc|gzinflate)&amp;#34; | awk -F: &amp;#39;{print $1}&amp;#39; | sort | uniq
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
