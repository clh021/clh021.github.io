<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Ts on 良宏</title>
        <link>/tags/ts/</link>
        <description>Recent content in Ts on 良宏</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 01 Jan 2020 12:01:20 +0800</lastBuildDate><atom:link href="/tags/ts/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>TS流文件合并</title>
        <link>/post/live/ts.concat/</link>
        <pubDate>Wed, 01 Jan 2020 12:01:20 +0800</pubDate>
        
        <guid>/post/live/ts.concat/</guid>
        <description>&lt;h1 id=&#34;无需软件合并多个ts流文件&#34;&gt;无需软件合并多个TS流文件
&lt;/h1&gt;&lt;p&gt;Windows&amp;amp;Linux文件合并
原文：http://www.yaosansi.com/post/how-to-combine-files-on-windows-and-linux/&lt;/p&gt;
&lt;p&gt;WINDOWS&lt;/p&gt;
&lt;p&gt;格式：copy /b ＜filename1＞+＜filename2＞+…+＜filenameN＞ ＜filename＞
使用方法：假设你有两个文件分别是stream1.ts 和 stream2.ts 那么我们在该目录下输入“copy /b stream1.ts+stream2.ts stream.ts”就可以了，其中stream.ts是你合并后生成的新文件名。&lt;/p&gt;
&lt;p&gt;当然，windows也可以使用type命令：&lt;/p&gt;
&lt;p&gt;格式：type file1 file2 &amp;gt; file3
Linux
在Linux下同样也能实现文件合并，用“cat”命令就能实现。&lt;/p&gt;
&lt;p&gt;格式：cat stream1.ts stream2.ts ＞ stream.ts
FFmpeg
以上方法仅适合TS等文件信息保存中文件各个片段的视频格式。而对于文件信息在文件特定部位（如文件头）等视频，直接使用上述方法只是把文件强制的合并到了一起，甚至不能正常播放。&lt;/p&gt;
&lt;p&gt;使用ffmpeg的concat可以实现简单的流文件合并功能&lt;/p&gt;
&lt;p&gt;ffmpeg -i &amp;ldquo;concat:01.ts|02.ts&amp;rdquo;  -c copy -y  cat.ts
也可以使用文件列表，将需要拼接的视频文件按以下格式保存在一个列表 list.txt 中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# this is a comment
file &amp;#39;/path/to/file1&amp;#39;
file &amp;#39;/path/to/file2&amp;#39;
file &amp;#39;/path/to/file3&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ffmpeg -f concat -i mylist.txt -c copy output
自动生产文件列表 (将目录中所有.wav文件输出到mylist.txt中)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# with a bash for loop
for f in ./*.wav; do echo &amp;#34;file &amp;#39;$f&amp;#39;&amp;#34; &amp;gt;&amp;gt; mylist.txt; done
# or with printf
printf &amp;#34;file &amp;#39;%s&amp;#39;\n&amp;#34; ./*.wav &amp;gt; mylist.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：FFmpeg由于只是重新封装，并不会对文件进行重新的编解码，所以速度非常快并且是无损的，但并不意味着适用所有场景。&lt;/p&gt;
&lt;p&gt;Shell脚本
合并相同编码文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash
#cut/join videos using ffmpeg without quality loss

if [ -z $1 ] || [ -z $2 ]; then
   echo &amp;#34;Usage:$0 c[ut] seconds &amp;lt;File&amp;gt;&amp;#34;
   echo &amp;#34;   eg. $0 c 10 80 example.mp4&amp;#34;
   echo &amp;#34;   eg. $0 c 00:00:10 00:01:20 example.mp4&amp;#34;
   echo &amp;#34;Usage:$0 j[oin] &amp;lt;FileType&amp;gt;&amp;#34;
   echo &amp;#34;   eg. $0 j avi&amp;#34;
   exit
fi

case &amp;#34;$1&amp;#34; in
   c)
      echo &amp;#34;cuttig video...&amp;#34;
      fileName=$(echo $4 | cut -f 1 -d &amp;#39;.&amp;#39;)
      fileType=$(echo $4 | cut -f 2 -d &amp;#39;.&amp;#39;)
      ffmpeg -i $4 -ss $2 -t $3 -acodec copy -vcodec copy $fileName-$2-$3.$fileType
      ;;
   j)
      echo &amp;#34;joinning videos...&amp;#34;
      rm temp_list.txt      
      for f in ./*.$2; do echo &amp;#34;file &amp;#39;$f&amp;#39;&amp;#34; &amp;gt;&amp;gt; temp_list.txt; done
      printf &amp;#34;file &amp;#39;%s&amp;#39;\n&amp;#34; ./*.$2 &amp;gt; temp_list.txt
      ffmpeg -f concat -i temp_list.txt -c copy output.$2
      rm temp_list.txt
      ;;
   *)
      echo &amp;#34;wrong arguments&amp;#34;
      ;;
esac
exit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;合并不同编码文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash
 
################################################################################
#
# Script name: MultiMedia Concat Script (mmcat)
# Author: burek (burek021@gmail.com)
# License: GNU/GPL, see http://www.gnu.org/copyleft/gpl.html
# Date: 2012-07-14
#
# This script concatenates (joins, merges) several audio/video inputs into one
# final output (just like as if all the inputs were played in a playlist, one
# after another).
#
# All input files must have at least one audio and at least one video stream.
# If not, you can easily add audio silence, using FFmpeg. Just search the
# internet for &amp;#34;ffmpeg add silence&amp;#34;.
#
# The script makes use of FFmpeg tool (www.ffmpeg.org) and is free for use under
# the GPL license. The inspiration for this script came from this FAQ item:
# http://ffmpeg.org/faq.html#How-can-I-join-video-files_003f
#
# If you find any bugs, please send me an e-mail so I can fix it.
#
################################################################################
#
# General syntax: mmcat &amp;lt;input1&amp;gt; &amp;lt;input2&amp;gt; &amp;lt;input3&amp;gt; ... &amp;lt;output&amp;gt;
#
# For example: mmcat file1.flv file2.flv output.flv
# would create &amp;#34;output.flv&amp;#34; out of &amp;#34;file1.flv&amp;#34; and &amp;#34;file2.flv&amp;#34;.
#
################################################################################
 
# change this to what you need !!!
EXTRA_OPTIONS=&amp;#39;-vcodec libx264 -crf 23 -preset medium -acodec aac -strict experimental -ac 2 -ar 44100 -ab 128k&amp;#39;
 
################################################################################
#
# NO NEED TO TOUCH ANYTHING AFTER THIS LINE!
#
################################################################################
 
# the version of the script
VERSION=1.3
 
# location of temp folder
TMP=/tmp
 
################################################################################
 
echo &amp;#34;MultiMedia Concat Script v$VERSION (mmcat) - A script to concatenate multiple multimedia files.&amp;#34;
echo &amp;#34;Based on FFmpeg - www.ffmpeg.org&amp;#34;
echo &amp;#34;Don&amp;#39;t forget to edit this script and change EXTRA_OPTIONS&amp;#34;
echo &amp;#34;&amp;#34;
 
################################################################################
# syntax check (has to have at least 3 params: infile1, infile2, outfile
################################################################################
if [ -z $3 ]; then
    echo &amp;#34;Syntax: $0 &amp;lt;input1&amp;gt; &amp;lt;input2&amp;gt; &amp;lt;input3&amp;gt; ... &amp;lt;output&amp;gt;&amp;#34;
    exit 1
fi
 
################################################################################
# get all the command line parameters, except for the last one, which is output
################################################################################
# $first  - first parameter
# $last   - last parameter (output file)
# $inputs - all the inputs, except the first input, because 1st input is
#           handled separately
################################################################################
first=${@:1:1}
last=${@:$#:1}
len=$(($#-2))
inputs=${@:2:$len}
 
# remove all previous tmp fifos (if exist)
rm -f $TMP/mcs_*
 
################################################################################
# decode first input differently, because the video header does not have to be
# kept for each video input, only the header from the first video is needed
################################################################################
mkfifo $TMP/mcs_a1 $TMP/mcs_v1
 
ffmpeg -y -i $first -vn -f u16le -acodec pcm_s16le -ac 2 -ar 44100 $TMP/mcs_a1 2&amp;gt;/dev/null &amp;lt;/dev/null &amp;amp;
ffmpeg -y -i $first -an -f yuv4mpegpipe -vcodec rawvideo $TMP/mcs_v1 2&amp;gt;/dev/null &amp;lt;/dev/null &amp;amp;
 
# if you need to log the output of decoding processes (usually not necessary)
# then replace the &amp;#34;2&amp;gt;/dev/null&amp;#34; in 2 lines above with your log file names, like this:
#ffmpeg -y -i $first -vn -f u16le -acodec pcm_s16le -ac 2 -ar 44100 $TMP/mcs_a1 2&amp;gt;$TMP/log.a.1 &amp;lt;/dev/null &amp;amp;
#ffmpeg -y -i $first -an -f yuv4mpegpipe -vcodec rawvideo $TMP/mcs_v1 2&amp;gt;$TMP/log.v.1 &amp;lt;/dev/null &amp;amp;
 
################################################################################
# decode all the other inputs, remove first line of video (header) with tail
# $all_a and $all_v are lists of all a/v fifos, to be used by &amp;#34;cat&amp;#34; later on
################################################################################
all_a=$TMP/mcs_a1
all_v=$TMP/mcs_v1
i=2
for f in $inputs
do
    mkfifo $TMP/mcs_a$i $TMP/mcs_v$i
 
    ffmpeg -y -i $f -vn -f u16le -acodec pcm_s16le -ac 2 -ar 44100 $TMP/mcs_a$i 2&amp;gt;/dev/null &amp;lt;/dev/null &amp;amp;
    { ffmpeg -y -i $f -an -f yuv4mpegpipe -vcodec rawvideo - 2&amp;gt;/dev/null &amp;lt;/dev/null | tail -n +2 &amp;gt; $TMP/mcs_v$i ; } &amp;amp;
 
    # if you need to log the output of decoding processes (usually not necessary)
    # then replace the &amp;#34;2&amp;gt;/dev/null&amp;#34; in 2 lines above with your log file names, like this:
    #ffmpeg -y -i $f -vn -f u16le -acodec pcm_s16le -ac 2 -ar 44100 $TMP/mcs_a$i 2&amp;gt;$TMP/log.a.$i &amp;lt;/dev/null &amp;amp;
    #{ ffmpeg -y -i $f -an -f yuv4mpegpipe -vcodec rawvideo - 2&amp;gt;$TMP/log.v.$i &amp;lt;/dev/null | tail -n +2 &amp;gt; $TMP/mcs_v$i ; } &amp;amp;
 
    all_a=&amp;#34;$all_a $TMP/mcs_a$i&amp;#34;
    all_v=&amp;#34;$all_v $TMP/mcs_v$i&amp;#34;
    let i++
done
 
################################################################################
# concatenate all raw audio/video inputs into one audio/video
################################################################################
mkfifo $TMP/mcs_a_all
mkfifo $TMP/mcs_v_all
cat $all_a &amp;gt; $TMP/mcs_a_all &amp;amp;
cat $all_v &amp;gt; $TMP/mcs_v_all &amp;amp;
 
################################################################################
# finally, encode the raw concatenated audio/video into something useful
################################################################################
ffmpeg -f u16le -acodec pcm_s16le -ac 2 -ar 44100 -i $TMP/mcs_a_all \
       -f yuv4mpegpipe -vcodec rawvideo -i $TMP/mcs_v_all \
    $EXTRA_OPTIONS \
    $last
 
################################################################################
# remove all fifos
################################################################################
rm -f $TMP/mcs_*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://trac.ffmpeg.org/wiki/Concatenate&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://trac.ffmpeg.org/wiki/Concatenate&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://ffmpeg.org/ffmpeg.html#Stream-copy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ffmpeg.org/ffmpeg.html#Stream-copy&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;http://segmentfault.com/a/1190000000414341&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://segmentfault.com/a/1190000000414341&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/imcaspar/8771268&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gist.github.com/imcaspar/8771268&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/imcaspar/8778002&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gist.github.com/imcaspar/8778002&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以使用以下DOS命令达到目的（即“开始”菜单，“运行”，输入 cmd 再按回车）：
（此处假设你要合并的高清文件位于 E:\temps 这个位置）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;copy/b  E:\temps\*.ts  E:\temps\new.ts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如上，执行该命令后，E:\temps目录下的全部TS文件就被合并成一个new.ts文件了（你原来的那堆文件仍然存在）。&lt;/p&gt;
&lt;p&gt;命令解释：
这里使用copy命令的文件合并功能进行ts文件的合并，copy后面的 /b  参数表示把文件按二进制格式来合并，如果不加这个参数，则会把目标当成文本文件来合并，并在文件内添加不必要的标记，这会导致播放出错，所以必须加 /b 参数。
该命令的合并排序是按照你系统下的字母序来的，比如你的文件名是disk1.ts, disk2.ts, disk3.ts，那该命令就会按照disk1.ts+disk2.ts+disk3.ts的顺序来合并这三个文件，事实上，绝大多数网上下载的高清文件，都已经按字母序排列好了，所以你直接执行该命令即可。
上面的例子如果换成diskA.ts, diskB.ts, diskC.ts，该命令仍能正常进行，它会按diskA.ts+diskB.ts+diskC.ts（请统一排序关键字的大小写，即全部用大写A、B、C 或全部用小写a、b、c）。
最好只有一个排序关键字（数字或字母），也就是说各文件名相互间只有一个字符不同，见上面提示。
如果你想万无一失，可以手工把文件名改为1.ts, 2.ts, 3.ts, …..再执行合并。
最后补充两点：&lt;br&gt;
如果你用软件来合并，请注意看软件的说明，有些软件会在合并过程中进行重编码，这可能导致高清文件质量下降。&lt;/p&gt;
&lt;p&gt;如果你的高清文件所在硬盘路径太长，请直接将路径复制下来，在Dos命令窗口，待插入的位置上点鼠标右键，选“粘贴”即可，在Dos窗口下不能用 Ctrl+v 来进行粘贴！&lt;/p&gt;
&lt;p&gt;可以使用以下DOS命令达到目的（即“开始”菜单，“运行”，输入 cmd 再按回车）：
（此处假设你要合并的高清文件位于 E:\temps 这个位置）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;copy/b  E:\temps\*.ts  E:\temps\new.ts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如上，执行该命令后，E:\temps目录下的全部TS文件就被合并成一个new.ts文件了（你原来的那堆文件仍然存在）。&lt;/p&gt;
&lt;p&gt;命令解释：
这里使用copy命令的文件合并功能进行ts文件的合并，copy后面的 /b  参数表示把文件按二进制格式来合并，如果不加这个参数，则会把目标当成文本文件来合并，并在文件内添加不必要的标记，这会导致播放出错，所以必须加 /b 参数。
该命令的合并排序是按照你系统下的字母序来的，比如你的文件名是disk1.ts, disk2.ts, disk3.ts，那该命令就会按照disk1.ts+disk2.ts+disk3.ts的顺序来合并这三个文件，事实上，绝大多数网上下载的高清文件，都已经按字母序排列好了，所以你直接执行该命令即可。
上面的例子如果换成diskA.ts, diskB.ts, diskC.ts，该命令仍能正常进行，它会按diskA.ts+diskB.ts+diskC.ts（请统一排序关键字的大小写，即全部用大写A、B、C 或全部用小写a、b、c）。
最好只有一个排序关键字（数字或字母），也就是说各文件名相互间只有一个字符不同，见上面提示。
如果你想万无一失，可以手工把文件名改为1.ts, 2.ts, 3.ts, …..再执行合并。
最后补充两点：&lt;/p&gt;
&lt;p&gt;如果你用软件来合并，请注意看软件的说明，有些软件会在合并过程中进行重编码，这可能导致高清文件质量下降。&lt;/p&gt;
&lt;p&gt;如果你的高清文件所在硬盘路径太长，请直接将路径复制下来，在Dos命令窗口，待插入的位置上点鼠标右键，选“粘贴”即可，在Dos窗口下不能用 Ctrl+v 来进行粘贴！&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
